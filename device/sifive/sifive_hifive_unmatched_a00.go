// Automatically generated file. DO NOT EDIT.
// Generated by gen-device-svd.go from fu740.svd, see https://github.com/posborne/cmsis-svd/tree/master/data/SiFive-Community

//go:build sifive && sifive_hifive_unmatched_a00

/*
// From sifive,hifive-unmatched-a00,model device generator
*/

package sifive

import (
	"github.com/goplus/emb/runtime/volatile"
	"unsafe"
)

// Some information about this device.
const (
	Device = "sifive_hifive_unmatched_a00"
)

// Interrupt numbers.
const (
	// Highest interrupt number on this device.
	IRQ_max = 0
)

// Pseudo function call that is replaced by the compiler with the actual
// functions registered through interrupt.New.
//
// NOTE(zzy): runtime/interrupt.callHandlers is not yet implemented in LLGO
// Original linkname: //go:linkname callHandlers runtime/interrupt.callHandlers
func callHandlers(num int) {
	// TODO: implement interrupt handler dispatch mechanism
}
func HandleInterrupt(num int) {
	switch num {
	}
}

// Peripherals.
var (
	// From sifive,ccache0,control peripheral generator
	sifive_ccache0_0 = (*sifive_ccache0_0_Type)(unsafe.Pointer(uintptr(0x2010000)))

	// From riscv,clint0,control peripheral generator
	riscv_clint0_0 = (*riscv_clint0_0_Type)(unsafe.Pointer(uintptr(0x2000000)))

	// From sifive,gpio0,control peripheral generator
	sifive_gpio0_0 = (*sifive_gpio0_0_Type)(unsafe.Pointer(uintptr(0x10060000)))

	// From sifive,i2c0,control peripheral generator
	sifive_i2c0_0 = (*sifive_i2c0_0_Type)(unsafe.Pointer(uintptr(0x10030000)))

	// From sifive,i2c0,control peripheral generator
	sifive_i2c0_1 = (*sifive_i2c0_1_Type)(unsafe.Pointer(uintptr(0x10031000)))

	// From riscv,plic0,control peripheral generator
	riscv_plic0_0 = (*riscv_plic0_0_Type)(unsafe.Pointer(uintptr(0xc000000)))

	// From sifive,pwm0,control peripheral generator
	sifive_pwm0_0 = (*sifive_pwm0_0_Type)(unsafe.Pointer(uintptr(0x10020000)))

	// From sifive,pwm0,control peripheral generator
	sifive_pwm0_1 = (*sifive_pwm0_1_Type)(unsafe.Pointer(uintptr(0x10021000)))

	// From sifive,uart0,control peripheral generator
	sifive_uart0_0 = (*sifive_uart0_0_Type)(unsafe.Pointer(uintptr(0x10010000)))

	// From sifive,uart0,control peripheral generator
	sifive_uart0_1 = (*sifive_uart0_1_Type)(unsafe.Pointer(uintptr(0x10011000)))

	// From sifive,spi0,control peripheral generator
	sifive_spi0_0 = (*sifive_spi0_0_Type)(unsafe.Pointer(uintptr(0x10040000)))

	// From sifive,spi0,control peripheral generator
	sifive_spi0_1 = (*sifive_spi0_1_Type)(unsafe.Pointer(uintptr(0x10041000)))

	// From sifive,spi0,control peripheral generator
	sifive_spi0_2 = (*sifive_spi0_2_Type)(unsafe.Pointer(uintptr(0x10050000)))

	// From sifive,test0,control peripheral generator
	sifive_test0_0 = (*sifive_test0_0_Type)(unsafe.Pointer(uintptr(0x4000)))
)

// From sifive,ccache0,control peripheral generator
type sifive_ccache0_0_Type struct {
	CONFIG         volatile.Register32 // 0x0
	_              [4]byte
	WAYENABLE      volatile.Register32 // 0x8
	_              [8180]byte
	L2PERFEVENT0   volatile.Register32 // 0x2000
	_              [4]byte
	L2PERFEVENT1   volatile.Register32 // 0x2008
	_              [2036]byte
	L2CLIENTFILTER volatile.Register32 // 0x2800
	_              [2044]byte
	L2PMCOUNTER0   volatile.Register32 // 0x3000
	_              [4]byte
	L2PMCOUNTER1   volatile.Register32 // 0x3008
	_              [492]byte
	L2PMCOUNTER63  volatile.Register32 // 0x31F8
}

// sifive_ccache0_0.CONFIG: Information about the Cache Configuration
func (o *sifive_ccache0_0_Type) SetCONFIG_BANKS(value uint32) {
	volatile.StoreUint32(&o.CONFIG.Reg, volatile.LoadUint32(&o.CONFIG.Reg)&^(0xff)|value)
}
func (o *sifive_ccache0_0_Type) GetCONFIG_BANKS() uint32 {
	return volatile.LoadUint32(&o.CONFIG.Reg) & 0xff
}
func (o *sifive_ccache0_0_Type) SetCONFIG_WAYS(value uint32) {
	volatile.StoreUint32(&o.CONFIG.Reg, volatile.LoadUint32(&o.CONFIG.Reg)&^(0xff00)|value<<8)
}
func (o *sifive_ccache0_0_Type) GetCONFIG_WAYS() uint32 {
	return (volatile.LoadUint32(&o.CONFIG.Reg) & 0xff00) >> 8
}
func (o *sifive_ccache0_0_Type) SetCONFIG_LGSETS(value uint32) {
	volatile.StoreUint32(&o.CONFIG.Reg, volatile.LoadUint32(&o.CONFIG.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_ccache0_0_Type) GetCONFIG_LGSETS() uint32 {
	return (volatile.LoadUint32(&o.CONFIG.Reg) & 0xff0000) >> 16
}
func (o *sifive_ccache0_0_Type) SetCONFIG_LGBLOCKBYTES(value uint32) {
	volatile.StoreUint32(&o.CONFIG.Reg, volatile.LoadUint32(&o.CONFIG.Reg)&^(0xff000000)|value<<24)
}
func (o *sifive_ccache0_0_Type) GetCONFIG_LGBLOCKBYTES() uint32 {
	return (volatile.LoadUint32(&o.CONFIG.Reg) & 0xff000000) >> 24
}

// From riscv,clint0,control peripheral generator
type riscv_clint0_0_Type struct {
	MSIP_0     volatile.Register32 // 0x0
	MSIP_1     volatile.Register32 // 0x4
	MSIP_2     volatile.Register32 // 0x8
	MSIP_3     volatile.Register32 // 0xC
	MSIP_4     volatile.Register32 // 0x10
	_          [16364]byte
	MTIMECMP_0 volatile.Register64 // 0x4000
	MTIMECMP_1 volatile.Register64 // 0x4008
	MTIMECMP_2 volatile.Register64 // 0x4010
	MTIMECMP_3 volatile.Register64 // 0x4018
	MTIMECMP_4 volatile.Register64 // 0x4020
	_          [32720]byte
	MTIME      volatile.Register64 // 0xBFF8
}

// From sifive,gpio0,control peripheral generator
type sifive_gpio0_0_Type struct {
	INPUT_VAL  volatile.Register32 // 0x0
	INPUT_EN   volatile.Register32 // 0x4
	OUTPUT_EN  volatile.Register32 // 0x8
	OUTPUT_VAL volatile.Register32 // 0xC
	PUE        volatile.Register32 // 0x10
	DS         volatile.Register32 // 0x14
	RISE_IE    volatile.Register32 // 0x18
	RISE_IP    volatile.Register32 // 0x1C
	FALL_IE    volatile.Register32 // 0x20
	FALL_IP    volatile.Register32 // 0x24
	HIGH_IE    volatile.Register32 // 0x28
	HIGH_IP    volatile.Register32 // 0x2C
	LOW_IE     volatile.Register32 // 0x30
	LOW_IP     volatile.Register32 // 0x34
	IOF_EN     volatile.Register32 // 0x38
	IOF_SEL    volatile.Register32 // 0x3C
	OUT_XOR    volatile.Register32 // 0x40
}

// From sifive,i2c0,control peripheral generator
type sifive_i2c0_0_Type struct {
	PRESCALE_LOW      volatile.Register32 // 0x0
	PRESCALE_HIGH     volatile.Register32 // 0x4
	CONTROL           volatile.Register32 // 0x8
	TRANSMIT__RECEIVE volatile.Register32 // 0xC
	COMMAND__STATUS   volatile.Register32 // 0x10
}

// sifive_i2c0_0.CONTROL: Control register
func (o *sifive_i2c0_0_Type) SetCONTROL_EN(value uint32) {
	volatile.StoreUint32(&o.CONTROL.Reg, volatile.LoadUint32(&o.CONTROL.Reg)&^(0x40)|value<<6)
}
func (o *sifive_i2c0_0_Type) GetCONTROL_EN() uint32 {
	return (volatile.LoadUint32(&o.CONTROL.Reg) & 0x40) >> 6
}
func (o *sifive_i2c0_0_Type) SetCONTROL_IEN(value uint32) {
	volatile.StoreUint32(&o.CONTROL.Reg, volatile.LoadUint32(&o.CONTROL.Reg)&^(0x80)|value<<7)
}
func (o *sifive_i2c0_0_Type) GetCONTROL_IEN() uint32 {
	return (volatile.LoadUint32(&o.CONTROL.Reg) & 0x80) >> 7
}

// sifive_i2c0_0.COMMAND__STATUS: Command write and status read register
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_IACK__RD_IF(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x1)|value)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_IACK__RD_IF() uint32 {
	return volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x1
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_RES__RD_TIP(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x2)|value<<1)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_RES__RD_TIP() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x2) >> 1
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_RES__RD_RES(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x4)|value<<2)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_RES__RD_RES() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x4) >> 2
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_ACK__RD_RES(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x8)|value<<3)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_ACK__RD_RES() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x8) >> 3
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_TXD__RD_RES(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x10)|value<<4)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_TXD__RD_RES() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x10) >> 4
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_RXD__RD_AL(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x20)|value<<5)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_RXD__RD_AL() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x20) >> 5
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_STO__RD_BUSY(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x40)|value<<6)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_STO__RD_BUSY() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x40) >> 6
}
func (o *sifive_i2c0_0_Type) SetCOMMAND__STATUS_WR_STA__RD_RXACK(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x80)|value<<7)
}
func (o *sifive_i2c0_0_Type) GetCOMMAND__STATUS_WR_STA__RD_RXACK() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x80) >> 7
}

// From sifive,i2c0,control peripheral generator
type sifive_i2c0_1_Type struct {
	PRESCALE_LOW      volatile.Register32 // 0x0
	PRESCALE_HIGH     volatile.Register32 // 0x4
	CONTROL           volatile.Register32 // 0x8
	TRANSMIT__RECEIVE volatile.Register32 // 0xC
	COMMAND__STATUS   volatile.Register32 // 0x10
}

// sifive_i2c0_1.CONTROL: Control register
func (o *sifive_i2c0_1_Type) SetCONTROL_EN(value uint32) {
	volatile.StoreUint32(&o.CONTROL.Reg, volatile.LoadUint32(&o.CONTROL.Reg)&^(0x40)|value<<6)
}
func (o *sifive_i2c0_1_Type) GetCONTROL_EN() uint32 {
	return (volatile.LoadUint32(&o.CONTROL.Reg) & 0x40) >> 6
}
func (o *sifive_i2c0_1_Type) SetCONTROL_IEN(value uint32) {
	volatile.StoreUint32(&o.CONTROL.Reg, volatile.LoadUint32(&o.CONTROL.Reg)&^(0x80)|value<<7)
}
func (o *sifive_i2c0_1_Type) GetCONTROL_IEN() uint32 {
	return (volatile.LoadUint32(&o.CONTROL.Reg) & 0x80) >> 7
}

// sifive_i2c0_1.COMMAND__STATUS: Command write and status read register
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_IACK__RD_IF(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x1)|value)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_IACK__RD_IF() uint32 {
	return volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x1
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_RES__RD_TIP(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x2)|value<<1)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_RES__RD_TIP() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x2) >> 1
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_RES__RD_RES(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x4)|value<<2)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_RES__RD_RES() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x4) >> 2
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_ACK__RD_RES(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x8)|value<<3)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_ACK__RD_RES() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x8) >> 3
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_TXD__RD_RES(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x10)|value<<4)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_TXD__RD_RES() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x10) >> 4
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_RXD__RD_AL(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x20)|value<<5)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_RXD__RD_AL() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x20) >> 5
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_STO__RD_BUSY(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x40)|value<<6)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_STO__RD_BUSY() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x40) >> 6
}
func (o *sifive_i2c0_1_Type) SetCOMMAND__STATUS_WR_STA__RD_RXACK(value uint32) {
	volatile.StoreUint32(&o.COMMAND__STATUS.Reg, volatile.LoadUint32(&o.COMMAND__STATUS.Reg)&^(0x80)|value<<7)
}
func (o *sifive_i2c0_1_Type) GetCOMMAND__STATUS_WR_STA__RD_RXACK() uint32 {
	return (volatile.LoadUint32(&o.COMMAND__STATUS.Reg) & 0x80) >> 7
}

// From riscv,plic0,control peripheral generator
type riscv_plic0_0_Type struct {
	_            [4]byte
	PRIORITY_1   volatile.Register32 // 0x4
	PRIORITY_2   volatile.Register32 // 0x8
	PRIORITY_3   volatile.Register32 // 0xC
	PRIORITY_4   volatile.Register32 // 0x10
	PRIORITY_5   volatile.Register32 // 0x14
	PRIORITY_6   volatile.Register32 // 0x18
	PRIORITY_7   volatile.Register32 // 0x1C
	PRIORITY_8   volatile.Register32 // 0x20
	PRIORITY_9   volatile.Register32 // 0x24
	PRIORITY_10  volatile.Register32 // 0x28
	PRIORITY_11  volatile.Register32 // 0x2C
	PRIORITY_12  volatile.Register32 // 0x30
	PRIORITY_13  volatile.Register32 // 0x34
	PRIORITY_14  volatile.Register32 // 0x38
	PRIORITY_15  volatile.Register32 // 0x3C
	PRIORITY_16  volatile.Register32 // 0x40
	PRIORITY_17  volatile.Register32 // 0x44
	PRIORITY_18  volatile.Register32 // 0x48
	PRIORITY_19  volatile.Register32 // 0x4C
	PRIORITY_20  volatile.Register32 // 0x50
	PRIORITY_21  volatile.Register32 // 0x54
	PRIORITY_22  volatile.Register32 // 0x58
	PRIORITY_23  volatile.Register32 // 0x5C
	PRIORITY_24  volatile.Register32 // 0x60
	PRIORITY_25  volatile.Register32 // 0x64
	PRIORITY_26  volatile.Register32 // 0x68
	PRIORITY_27  volatile.Register32 // 0x6C
	PRIORITY_28  volatile.Register32 // 0x70
	PRIORITY_29  volatile.Register32 // 0x74
	PRIORITY_30  volatile.Register32 // 0x78
	PRIORITY_31  volatile.Register32 // 0x7C
	PRIORITY_32  volatile.Register32 // 0x80
	PRIORITY_33  volatile.Register32 // 0x84
	PRIORITY_34  volatile.Register32 // 0x88
	PRIORITY_35  volatile.Register32 // 0x8C
	PRIORITY_36  volatile.Register32 // 0x90
	PRIORITY_37  volatile.Register32 // 0x94
	PRIORITY_38  volatile.Register32 // 0x98
	PRIORITY_39  volatile.Register32 // 0x9C
	PRIORITY_40  volatile.Register32 // 0xA0
	PRIORITY_41  volatile.Register32 // 0xA4
	PRIORITY_42  volatile.Register32 // 0xA8
	PRIORITY_43  volatile.Register32 // 0xAC
	PRIORITY_44  volatile.Register32 // 0xB0
	PRIORITY_45  volatile.Register32 // 0xB4
	PRIORITY_46  volatile.Register32 // 0xB8
	PRIORITY_47  volatile.Register32 // 0xBC
	PRIORITY_48  volatile.Register32 // 0xC0
	PRIORITY_49  volatile.Register32 // 0xC4
	PRIORITY_50  volatile.Register32 // 0xC8
	PRIORITY_51  volatile.Register32 // 0xCC
	PRIORITY_52  volatile.Register32 // 0xD0
	PRIORITY_53  volatile.Register32 // 0xD4
	PRIORITY_54  volatile.Register32 // 0xD8
	PRIORITY_55  volatile.Register32 // 0xDC
	PRIORITY_56  volatile.Register32 // 0xE0
	PRIORITY_57  volatile.Register32 // 0xE4
	PRIORITY_58  volatile.Register32 // 0xE8
	PRIORITY_59  volatile.Register32 // 0xEC
	PRIORITY_60  volatile.Register32 // 0xF0
	PRIORITY_61  volatile.Register32 // 0xF4
	PRIORITY_62  volatile.Register32 // 0xF8
	PRIORITY_63  volatile.Register32 // 0xFC
	PRIORITY_64  volatile.Register32 // 0x100
	PRIORITY_65  volatile.Register32 // 0x104
	PRIORITY_66  volatile.Register32 // 0x108
	PRIORITY_67  volatile.Register32 // 0x10C
	PRIORITY_68  volatile.Register32 // 0x110
	PRIORITY_69  volatile.Register32 // 0x114
	_            [3816]byte
	PENDING_0    volatile.Register32 // 0x1000
	PENDING_1    volatile.Register32 // 0x1004
	PENDING_2    volatile.Register32 // 0x1008
	_            [4084]byte
	ENABLE_0_0   volatile.Register32 // 0x2000
	ENABLE_1_0   volatile.Register32 // 0x2004
	ENABLE_2_0   volatile.Register32 // 0x2008
	_            [116]byte
	ENABLE_0_1   volatile.Register32 // 0x2080
	ENABLE_1_1   volatile.Register32 // 0x2084
	ENABLE_2_1   volatile.Register32 // 0x2088
	_            [116]byte
	ENABLE_0_2   volatile.Register32 // 0x2100
	ENABLE_1_2   volatile.Register32 // 0x2104
	ENABLE_2_2   volatile.Register32 // 0x2108
	_            [116]byte
	ENABLE_0_3   volatile.Register32 // 0x2180
	ENABLE_1_3   volatile.Register32 // 0x2184
	ENABLE_2_3   volatile.Register32 // 0x2188
	_            [116]byte
	ENABLE_0_4   volatile.Register32 // 0x2200
	ENABLE_1_4   volatile.Register32 // 0x2204
	ENABLE_2_4   volatile.Register32 // 0x2208
	_            [2088436]byte
	THRESHOLD_0  volatile.Register32 // 0x200000
	CLAIMPLETE_0 volatile.Register32 // 0x200004
	_            [4088]byte
	THRESHOLD_1  volatile.Register32 // 0x201000
	CLAIMPLETE_1 volatile.Register32 // 0x201004
	_            [4088]byte
	THRESHOLD_2  volatile.Register32 // 0x202000
	CLAIMPLETE_2 volatile.Register32 // 0x202004
	_            [4088]byte
	THRESHOLD_3  volatile.Register32 // 0x203000
	CLAIMPLETE_3 volatile.Register32 // 0x203004
	_            [4088]byte
	THRESHOLD_4  volatile.Register32 // 0x204000
	CLAIMPLETE_4 volatile.Register32 // 0x204004
}

// From sifive,pwm0,control peripheral generator
type sifive_pwm0_0_Type struct {
	PWMCFG   volatile.Register32 // 0x0
	_        [4]byte
	PWMCOUNT volatile.Register32 // 0x8
	_        [4]byte
	PWMS     volatile.Register32 // 0x10
	_        [12]byte
	PWMCMP0  volatile.Register32 // 0x20
	PWMCMP1  volatile.Register32 // 0x24
	PWMCMP2  volatile.Register32 // 0x28
	PWMCMP3  volatile.Register32 // 0x2C
}

// sifive_pwm0_0.PWMCFG: PWM configuration register
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMSCALE(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0xf)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMSCALE() uint32 {
	return volatile.LoadUint32(&o.PWMCFG.Reg) & 0xf
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMSTICKY(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x100)|value<<8)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMSTICKY() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x100) >> 8
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMZEROCMP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x200)|value<<9)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMZEROCMP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x200) >> 9
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMDEGLITCH(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x400)|value<<10)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMDEGLITCH() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x400) >> 10
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMENALWAYS(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x1000)|value<<12)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMENALWAYS() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x1000) >> 12
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMENONESHOT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x2000)|value<<13)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMENONESHOT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x2000) >> 13
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP0CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x10000)|value<<16)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP0CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x10000) >> 16
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP1CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x20000)|value<<17)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP1CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x20000) >> 17
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP2CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x40000)|value<<18)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP2CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x40000) >> 18
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP3CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x80000)|value<<19)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP3CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x80000) >> 19
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP0INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x100000)|value<<20)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP0INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x100000) >> 20
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP1INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x200000)|value<<21)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP1INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x200000) >> 21
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP2INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x400000)|value<<22)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP2INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x400000) >> 22
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP3INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x800000)|value<<23)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP3INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x800000) >> 23
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP0GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x1000000)|value<<24)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP0GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x1000000) >> 24
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP1GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x2000000)|value<<25)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP1GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x2000000) >> 25
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP2GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x4000000)|value<<26)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP2GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x4000000) >> 26
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP3GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x8000000)|value<<27)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP3GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x8000000) >> 27
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP0IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x10000000)|value<<28)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP0IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x10000000) >> 28
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP1IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x20000000)|value<<29)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP1IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x20000000) >> 29
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP2IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x40000000)|value<<30)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP2IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x40000000) >> 30
}
func (o *sifive_pwm0_0_Type) SetPWMCFG_PWMCMP3IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_pwm0_0_Type) GetPWMCFG_PWMCMP3IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x80000000) >> 31
}

// sifive_pwm0_0.PWMCOUNT: PWM count register
func (o *sifive_pwm0_0_Type) SetPWMCOUNT(value uint32) {
	volatile.StoreUint32(&o.PWMCOUNT.Reg, volatile.LoadUint32(&o.PWMCOUNT.Reg)&^(0x7fffffff)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMCOUNT() uint32 {
	return volatile.LoadUint32(&o.PWMCOUNT.Reg) & 0x7fffffff
}

// sifive_pwm0_0.PWMS: Scaled PWM count register
func (o *sifive_pwm0_0_Type) SetPWMS(value uint32) {
	volatile.StoreUint32(&o.PWMS.Reg, volatile.LoadUint32(&o.PWMS.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMS() uint32 {
	return volatile.LoadUint32(&o.PWMS.Reg) & 0xffff
}

// sifive_pwm0_0.PWMCMP0: PWM 0 compare register
func (o *sifive_pwm0_0_Type) SetPWMCMP0(value uint32) {
	volatile.StoreUint32(&o.PWMCMP0.Reg, volatile.LoadUint32(&o.PWMCMP0.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMCMP0() uint32 {
	return volatile.LoadUint32(&o.PWMCMP0.Reg) & 0xffff
}

// sifive_pwm0_0.PWMCMP1: PWM 1 compare register
func (o *sifive_pwm0_0_Type) SetPWMCMP1(value uint32) {
	volatile.StoreUint32(&o.PWMCMP1.Reg, volatile.LoadUint32(&o.PWMCMP1.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMCMP1() uint32 {
	return volatile.LoadUint32(&o.PWMCMP1.Reg) & 0xffff
}

// sifive_pwm0_0.PWMCMP2: PWM 2 compare register
func (o *sifive_pwm0_0_Type) SetPWMCMP2(value uint32) {
	volatile.StoreUint32(&o.PWMCMP2.Reg, volatile.LoadUint32(&o.PWMCMP2.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMCMP2() uint32 {
	return volatile.LoadUint32(&o.PWMCMP2.Reg) & 0xffff
}

// sifive_pwm0_0.PWMCMP3: PWM 3 compare register
func (o *sifive_pwm0_0_Type) SetPWMCMP3(value uint32) {
	volatile.StoreUint32(&o.PWMCMP3.Reg, volatile.LoadUint32(&o.PWMCMP3.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_0_Type) GetPWMCMP3() uint32 {
	return volatile.LoadUint32(&o.PWMCMP3.Reg) & 0xffff
}

// From sifive,pwm0,control peripheral generator
type sifive_pwm0_1_Type struct {
	PWMCFG   volatile.Register32 // 0x0
	_        [4]byte
	PWMCOUNT volatile.Register32 // 0x8
	_        [4]byte
	PWMS     volatile.Register32 // 0x10
	_        [12]byte
	PWMCMP0  volatile.Register32 // 0x20
	PWMCMP1  volatile.Register32 // 0x24
	PWMCMP2  volatile.Register32 // 0x28
	PWMCMP3  volatile.Register32 // 0x2C
}

// sifive_pwm0_1.PWMCFG: PWM configuration register
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMSCALE(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0xf)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMSCALE() uint32 {
	return volatile.LoadUint32(&o.PWMCFG.Reg) & 0xf
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMSTICKY(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x100)|value<<8)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMSTICKY() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x100) >> 8
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMZEROCMP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x200)|value<<9)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMZEROCMP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x200) >> 9
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMDEGLITCH(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x400)|value<<10)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMDEGLITCH() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x400) >> 10
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMENALWAYS(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x1000)|value<<12)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMENALWAYS() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x1000) >> 12
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMENONESHOT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x2000)|value<<13)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMENONESHOT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x2000) >> 13
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP0CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x10000)|value<<16)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP0CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x10000) >> 16
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP1CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x20000)|value<<17)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP1CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x20000) >> 17
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP2CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x40000)|value<<18)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP2CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x40000) >> 18
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP3CENTER(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x80000)|value<<19)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP3CENTER() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x80000) >> 19
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP0INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x100000)|value<<20)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP0INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x100000) >> 20
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP1INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x200000)|value<<21)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP1INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x200000) >> 21
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP2INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x400000)|value<<22)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP2INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x400000) >> 22
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP3INVERT(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x800000)|value<<23)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP3INVERT() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x800000) >> 23
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP0GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x1000000)|value<<24)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP0GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x1000000) >> 24
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP1GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x2000000)|value<<25)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP1GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x2000000) >> 25
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP2GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x4000000)|value<<26)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP2GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x4000000) >> 26
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP3GANG(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x8000000)|value<<27)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP3GANG() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x8000000) >> 27
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP0IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x10000000)|value<<28)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP0IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x10000000) >> 28
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP1IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x20000000)|value<<29)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP1IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x20000000) >> 29
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP2IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x40000000)|value<<30)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP2IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x40000000) >> 30
}
func (o *sifive_pwm0_1_Type) SetPWMCFG_PWMCMP3IP(value uint32) {
	volatile.StoreUint32(&o.PWMCFG.Reg, volatile.LoadUint32(&o.PWMCFG.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_pwm0_1_Type) GetPWMCFG_PWMCMP3IP() uint32 {
	return (volatile.LoadUint32(&o.PWMCFG.Reg) & 0x80000000) >> 31
}

// sifive_pwm0_1.PWMCOUNT: PWM count register
func (o *sifive_pwm0_1_Type) SetPWMCOUNT(value uint32) {
	volatile.StoreUint32(&o.PWMCOUNT.Reg, volatile.LoadUint32(&o.PWMCOUNT.Reg)&^(0x7fffffff)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMCOUNT() uint32 {
	return volatile.LoadUint32(&o.PWMCOUNT.Reg) & 0x7fffffff
}

// sifive_pwm0_1.PWMS: Scaled PWM count register
func (o *sifive_pwm0_1_Type) SetPWMS(value uint32) {
	volatile.StoreUint32(&o.PWMS.Reg, volatile.LoadUint32(&o.PWMS.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMS() uint32 {
	return volatile.LoadUint32(&o.PWMS.Reg) & 0xffff
}

// sifive_pwm0_1.PWMCMP0: PWM 0 compare register
func (o *sifive_pwm0_1_Type) SetPWMCMP0(value uint32) {
	volatile.StoreUint32(&o.PWMCMP0.Reg, volatile.LoadUint32(&o.PWMCMP0.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMCMP0() uint32 {
	return volatile.LoadUint32(&o.PWMCMP0.Reg) & 0xffff
}

// sifive_pwm0_1.PWMCMP1: PWM 1 compare register
func (o *sifive_pwm0_1_Type) SetPWMCMP1(value uint32) {
	volatile.StoreUint32(&o.PWMCMP1.Reg, volatile.LoadUint32(&o.PWMCMP1.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMCMP1() uint32 {
	return volatile.LoadUint32(&o.PWMCMP1.Reg) & 0xffff
}

// sifive_pwm0_1.PWMCMP2: PWM 2 compare register
func (o *sifive_pwm0_1_Type) SetPWMCMP2(value uint32) {
	volatile.StoreUint32(&o.PWMCMP2.Reg, volatile.LoadUint32(&o.PWMCMP2.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMCMP2() uint32 {
	return volatile.LoadUint32(&o.PWMCMP2.Reg) & 0xffff
}

// sifive_pwm0_1.PWMCMP3: PWM 3 compare register
func (o *sifive_pwm0_1_Type) SetPWMCMP3(value uint32) {
	volatile.StoreUint32(&o.PWMCMP3.Reg, volatile.LoadUint32(&o.PWMCMP3.Reg)&^(0xffff)|value)
}
func (o *sifive_pwm0_1_Type) GetPWMCMP3() uint32 {
	return volatile.LoadUint32(&o.PWMCMP3.Reg) & 0xffff
}

// From sifive,uart0,control peripheral generator
type sifive_uart0_0_Type struct {
	TXDATA volatile.Register32 // 0x0
	RXDATA volatile.Register32 // 0x4
	TXCTRL volatile.Register32 // 0x8
	RXCTRL volatile.Register32 // 0xC
	IE     volatile.Register32 // 0x10
	IP     volatile.Register32 // 0x14
	DIV    volatile.Register32 // 0x18
}

// sifive_uart0_0.TXDATA: Transmit data register
func (o *sifive_uart0_0_Type) SetTXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_uart0_0_Type) GetTXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.TXDATA.Reg) & 0xff
}
func (o *sifive_uart0_0_Type) SetTXDATA_FULL(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_uart0_0_Type) GetTXDATA_FULL() uint32 {
	return (volatile.LoadUint32(&o.TXDATA.Reg) & 0x80000000) >> 31
}

// sifive_uart0_0.RXDATA: Receive data register
func (o *sifive_uart0_0_Type) SetRXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_uart0_0_Type) GetRXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.RXDATA.Reg) & 0xff
}
func (o *sifive_uart0_0_Type) SetRXDATA_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_uart0_0_Type) GetRXDATA_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RXDATA.Reg) & 0x80000000) >> 31
}

// sifive_uart0_0.TXCTRL: Transmit control register
func (o *sifive_uart0_0_Type) SetTXCTRL_TXEN(value uint32) {
	volatile.StoreUint32(&o.TXCTRL.Reg, volatile.LoadUint32(&o.TXCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_0_Type) GetTXCTRL_TXEN() uint32 {
	return volatile.LoadUint32(&o.TXCTRL.Reg) & 0x1
}
func (o *sifive_uart0_0_Type) SetTXCTRL_NSTOP(value uint32) {
	volatile.StoreUint32(&o.TXCTRL.Reg, volatile.LoadUint32(&o.TXCTRL.Reg)&^(0x2)|value<<1)
}
func (o *sifive_uart0_0_Type) GetTXCTRL_NSTOP() uint32 {
	return (volatile.LoadUint32(&o.TXCTRL.Reg) & 0x2) >> 1
}
func (o *sifive_uart0_0_Type) SetTXCTRL_TXCNT(value uint32) {
	volatile.StoreUint32(&o.TXCTRL.Reg, volatile.LoadUint32(&o.TXCTRL.Reg)&^(0x70000)|value<<16)
}
func (o *sifive_uart0_0_Type) GetTXCTRL_TXCNT() uint32 {
	return (volatile.LoadUint32(&o.TXCTRL.Reg) & 0x70000) >> 16
}

// sifive_uart0_0.RXCTRL: Receive control register
func (o *sifive_uart0_0_Type) SetRXCTRL_RXEN(value uint32) {
	volatile.StoreUint32(&o.RXCTRL.Reg, volatile.LoadUint32(&o.RXCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_0_Type) GetRXCTRL_RXEN() uint32 {
	return volatile.LoadUint32(&o.RXCTRL.Reg) & 0x1
}
func (o *sifive_uart0_0_Type) SetRXCTRL_RXCNT(value uint32) {
	volatile.StoreUint32(&o.RXCTRL.Reg, volatile.LoadUint32(&o.RXCTRL.Reg)&^(0x70000)|value<<16)
}
func (o *sifive_uart0_0_Type) GetRXCTRL_RXCNT() uint32 {
	return (volatile.LoadUint32(&o.RXCTRL.Reg) & 0x70000) >> 16
}

// sifive_uart0_0.IE: UART interrupt enable
func (o *sifive_uart0_0_Type) SetIE_TXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_0_Type) GetIE_TXWM() uint32 {
	return volatile.LoadUint32(&o.IE.Reg) & 0x1
}
func (o *sifive_uart0_0_Type) SetIE_RXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_uart0_0_Type) GetIE_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IE.Reg) & 0x2) >> 1
}

// sifive_uart0_0.IP: UART interrupt pending
func (o *sifive_uart0_0_Type) SetIP_TXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_0_Type) GetIP_TXWM() uint32 {
	return volatile.LoadUint32(&o.IP.Reg) & 0x1
}
func (o *sifive_uart0_0_Type) SetIP_RXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x2)|value<<1)
}
func (o *sifive_uart0_0_Type) GetIP_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IP.Reg) & 0x2) >> 1
}

// sifive_uart0_0.DIV: Baud rate divisor
func (o *sifive_uart0_0_Type) SetDIV(value uint32) {
	volatile.StoreUint32(&o.DIV.Reg, volatile.LoadUint32(&o.DIV.Reg)&^(0xffff)|value)
}
func (o *sifive_uart0_0_Type) GetDIV() uint32 {
	return volatile.LoadUint32(&o.DIV.Reg) & 0xffff
}

// From sifive,uart0,control peripheral generator
type sifive_uart0_1_Type struct {
	TXDATA volatile.Register32 // 0x0
	RXDATA volatile.Register32 // 0x4
	TXCTRL volatile.Register32 // 0x8
	RXCTRL volatile.Register32 // 0xC
	IE     volatile.Register32 // 0x10
	IP     volatile.Register32 // 0x14
	DIV    volatile.Register32 // 0x18
}

// sifive_uart0_1.TXDATA: Transmit data register
func (o *sifive_uart0_1_Type) SetTXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_uart0_1_Type) GetTXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.TXDATA.Reg) & 0xff
}
func (o *sifive_uart0_1_Type) SetTXDATA_FULL(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_uart0_1_Type) GetTXDATA_FULL() uint32 {
	return (volatile.LoadUint32(&o.TXDATA.Reg) & 0x80000000) >> 31
}

// sifive_uart0_1.RXDATA: Receive data register
func (o *sifive_uart0_1_Type) SetRXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_uart0_1_Type) GetRXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.RXDATA.Reg) & 0xff
}
func (o *sifive_uart0_1_Type) SetRXDATA_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_uart0_1_Type) GetRXDATA_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RXDATA.Reg) & 0x80000000) >> 31
}

// sifive_uart0_1.TXCTRL: Transmit control register
func (o *sifive_uart0_1_Type) SetTXCTRL_TXEN(value uint32) {
	volatile.StoreUint32(&o.TXCTRL.Reg, volatile.LoadUint32(&o.TXCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_1_Type) GetTXCTRL_TXEN() uint32 {
	return volatile.LoadUint32(&o.TXCTRL.Reg) & 0x1
}
func (o *sifive_uart0_1_Type) SetTXCTRL_NSTOP(value uint32) {
	volatile.StoreUint32(&o.TXCTRL.Reg, volatile.LoadUint32(&o.TXCTRL.Reg)&^(0x2)|value<<1)
}
func (o *sifive_uart0_1_Type) GetTXCTRL_NSTOP() uint32 {
	return (volatile.LoadUint32(&o.TXCTRL.Reg) & 0x2) >> 1
}
func (o *sifive_uart0_1_Type) SetTXCTRL_TXCNT(value uint32) {
	volatile.StoreUint32(&o.TXCTRL.Reg, volatile.LoadUint32(&o.TXCTRL.Reg)&^(0x70000)|value<<16)
}
func (o *sifive_uart0_1_Type) GetTXCTRL_TXCNT() uint32 {
	return (volatile.LoadUint32(&o.TXCTRL.Reg) & 0x70000) >> 16
}

// sifive_uart0_1.RXCTRL: Receive control register
func (o *sifive_uart0_1_Type) SetRXCTRL_RXEN(value uint32) {
	volatile.StoreUint32(&o.RXCTRL.Reg, volatile.LoadUint32(&o.RXCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_1_Type) GetRXCTRL_RXEN() uint32 {
	return volatile.LoadUint32(&o.RXCTRL.Reg) & 0x1
}
func (o *sifive_uart0_1_Type) SetRXCTRL_RXCNT(value uint32) {
	volatile.StoreUint32(&o.RXCTRL.Reg, volatile.LoadUint32(&o.RXCTRL.Reg)&^(0x70000)|value<<16)
}
func (o *sifive_uart0_1_Type) GetRXCTRL_RXCNT() uint32 {
	return (volatile.LoadUint32(&o.RXCTRL.Reg) & 0x70000) >> 16
}

// sifive_uart0_1.IE: UART interrupt enable
func (o *sifive_uart0_1_Type) SetIE_TXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_1_Type) GetIE_TXWM() uint32 {
	return volatile.LoadUint32(&o.IE.Reg) & 0x1
}
func (o *sifive_uart0_1_Type) SetIE_RXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_uart0_1_Type) GetIE_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IE.Reg) & 0x2) >> 1
}

// sifive_uart0_1.IP: UART interrupt pending
func (o *sifive_uart0_1_Type) SetIP_TXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x1)|value)
}
func (o *sifive_uart0_1_Type) GetIP_TXWM() uint32 {
	return volatile.LoadUint32(&o.IP.Reg) & 0x1
}
func (o *sifive_uart0_1_Type) SetIP_RXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x2)|value<<1)
}
func (o *sifive_uart0_1_Type) GetIP_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IP.Reg) & 0x2) >> 1
}

// sifive_uart0_1.DIV: Baud rate divisor
func (o *sifive_uart0_1_Type) SetDIV(value uint32) {
	volatile.StoreUint32(&o.DIV.Reg, volatile.LoadUint32(&o.DIV.Reg)&^(0xffff)|value)
}
func (o *sifive_uart0_1_Type) GetDIV() uint32 {
	return volatile.LoadUint32(&o.DIV.Reg) & 0xffff
}

// From sifive,spi0,control peripheral generator
type sifive_spi0_0_Type struct {
	SCKDIV    volatile.Register32 // 0x0
	SCKMODE   volatile.Register32 // 0x4
	_         [8]byte
	CSID      volatile.Register32 // 0x10
	CSDEF     volatile.Register32 // 0x14
	CSMODE    volatile.Register32 // 0x18
	_         [12]byte
	DELAY0    volatile.Register32 // 0x28
	DELAY1    volatile.Register32 // 0x2C
	_         [8]byte
	EXTRADEL  volatile.Register32 // 0x38
	SAMPLEDEL volatile.Register32 // 0x3C
	FMT       volatile.Register32 // 0x40
	_         [4]byte
	TXDATA    volatile.Register32 // 0x48
	RXDATA    volatile.Register32 // 0x4C
	TXMARK    volatile.Register32 // 0x50
	RXMARK    volatile.Register32 // 0x54
	_         [8]byte
	FCTRL     volatile.Register32 // 0x60
	FFMT      volatile.Register32 // 0x64
	_         [8]byte
	IE        volatile.Register32 // 0x70
	IP        volatile.Register32 // 0x74
}

// sifive_spi0_0.SCKDIV: Serial clock divisor
func (o *sifive_spi0_0_Type) SetSCKDIV_DIV(value uint32) {
	volatile.StoreUint32(&o.SCKDIV.Reg, volatile.LoadUint32(&o.SCKDIV.Reg)&^(0xfff)|value)
}
func (o *sifive_spi0_0_Type) GetSCKDIV_DIV() uint32 {
	return volatile.LoadUint32(&o.SCKDIV.Reg) & 0xfff
}

// sifive_spi0_0.SCKMODE: Serial clock mode
func (o *sifive_spi0_0_Type) SetSCKMODE_PHA(value uint32) {
	volatile.StoreUint32(&o.SCKMODE.Reg, volatile.LoadUint32(&o.SCKMODE.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_0_Type) GetSCKMODE_PHA() uint32 {
	return volatile.LoadUint32(&o.SCKMODE.Reg) & 0x1
}
func (o *sifive_spi0_0_Type) SetSCKMODE_POL(value uint32) {
	volatile.StoreUint32(&o.SCKMODE.Reg, volatile.LoadUint32(&o.SCKMODE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_0_Type) GetSCKMODE_POL() uint32 {
	return (volatile.LoadUint32(&o.SCKMODE.Reg) & 0x2) >> 1
}

// sifive_spi0_0.CSID: Chip select ID
func (o *sifive_spi0_0_Type) SetCSID(value uint32) {
	volatile.StoreUint32(&o.CSID.Reg, value)
}
func (o *sifive_spi0_0_Type) GetCSID() uint32 {
	return volatile.LoadUint32(&o.CSID.Reg)
}

// sifive_spi0_0.CSDEF: Chip select default
func (o *sifive_spi0_0_Type) SetCSDEF(value uint32) {
	volatile.StoreUint32(&o.CSDEF.Reg, value)
}
func (o *sifive_spi0_0_Type) GetCSDEF() uint32 {
	return volatile.LoadUint32(&o.CSDEF.Reg)
}

// sifive_spi0_0.CSMODE: Chip select mode
func (o *sifive_spi0_0_Type) SetCSMODE_MODE(value uint32) {
	volatile.StoreUint32(&o.CSMODE.Reg, volatile.LoadUint32(&o.CSMODE.Reg)&^(0x3)|value)
}
func (o *sifive_spi0_0_Type) GetCSMODE_MODE() uint32 {
	return volatile.LoadUint32(&o.CSMODE.Reg) & 0x3
}

// sifive_spi0_0.DELAY0: Delay control 0
func (o *sifive_spi0_0_Type) SetDELAY0_CSSCK(value uint32) {
	volatile.StoreUint32(&o.DELAY0.Reg, volatile.LoadUint32(&o.DELAY0.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_0_Type) GetDELAY0_CSSCK() uint32 {
	return volatile.LoadUint32(&o.DELAY0.Reg) & 0xff
}
func (o *sifive_spi0_0_Type) SetDELAY0_SCKCS(value uint32) {
	volatile.StoreUint32(&o.DELAY0.Reg, volatile.LoadUint32(&o.DELAY0.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_0_Type) GetDELAY0_SCKCS() uint32 {
	return (volatile.LoadUint32(&o.DELAY0.Reg) & 0xff0000) >> 16
}

// sifive_spi0_0.DELAY1: Delay control 1
func (o *sifive_spi0_0_Type) SetDELAY1_INTERCS(value uint32) {
	volatile.StoreUint32(&o.DELAY1.Reg, volatile.LoadUint32(&o.DELAY1.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_0_Type) GetDELAY1_INTERCS() uint32 {
	return volatile.LoadUint32(&o.DELAY1.Reg) & 0xff
}
func (o *sifive_spi0_0_Type) SetDELAY1_INTERXFR(value uint32) {
	volatile.StoreUint32(&o.DELAY1.Reg, volatile.LoadUint32(&o.DELAY1.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_0_Type) GetDELAY1_INTERXFR() uint32 {
	return (volatile.LoadUint32(&o.DELAY1.Reg) & 0xff0000) >> 16
}

// sifive_spi0_0.EXTRADEL: SPI extra sampling delay to increase the SPI frequency
func (o *sifive_spi0_0_Type) SetEXTRADEL_COARSE(value uint32) {
	volatile.StoreUint32(&o.EXTRADEL.Reg, volatile.LoadUint32(&o.EXTRADEL.Reg)&^(0xfff)|value)
}
func (o *sifive_spi0_0_Type) GetEXTRADEL_COARSE() uint32 {
	return volatile.LoadUint32(&o.EXTRADEL.Reg) & 0xfff
}
func (o *sifive_spi0_0_Type) SetEXTRADEL_FINE(value uint32) {
	volatile.StoreUint32(&o.EXTRADEL.Reg, volatile.LoadUint32(&o.EXTRADEL.Reg)&^(0x1f000)|value<<12)
}
func (o *sifive_spi0_0_Type) GetEXTRADEL_FINE() uint32 {
	return (volatile.LoadUint32(&o.EXTRADEL.Reg) & 0x1f000) >> 12
}

// sifive_spi0_0.SAMPLEDEL: Number of delay stages from slave to the SPI controller
func (o *sifive_spi0_0_Type) SetSAMPLEDEL_SD(value uint32) {
	volatile.StoreUint32(&o.SAMPLEDEL.Reg, volatile.LoadUint32(&o.SAMPLEDEL.Reg)&^(0x1f)|value)
}
func (o *sifive_spi0_0_Type) GetSAMPLEDEL_SD() uint32 {
	return volatile.LoadUint32(&o.SAMPLEDEL.Reg) & 0x1f
}

// sifive_spi0_0.FMT: Frame format
func (o *sifive_spi0_0_Type) SetFMT_PROTO(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x3)|value)
}
func (o *sifive_spi0_0_Type) GetFMT_PROTO() uint32 {
	return volatile.LoadUint32(&o.FMT.Reg) & 0x3
}
func (o *sifive_spi0_0_Type) SetFMT_ENDIAN(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x4)|value<<2)
}
func (o *sifive_spi0_0_Type) GetFMT_ENDIAN() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0x4) >> 2
}
func (o *sifive_spi0_0_Type) SetFMT_DIR(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x8)|value<<3)
}
func (o *sifive_spi0_0_Type) GetFMT_DIR() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0x8) >> 3
}
func (o *sifive_spi0_0_Type) SetFMT_LEN(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0xf0000)|value<<16)
}
func (o *sifive_spi0_0_Type) GetFMT_LEN() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0xf0000) >> 16
}

// sifive_spi0_0.TXDATA: Tx FIFO Data
func (o *sifive_spi0_0_Type) SetTXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_0_Type) GetTXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.TXDATA.Reg) & 0xff
}
func (o *sifive_spi0_0_Type) SetTXDATA_FULL(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_spi0_0_Type) GetTXDATA_FULL() uint32 {
	return (volatile.LoadUint32(&o.TXDATA.Reg) & 0x80000000) >> 31
}

// sifive_spi0_0.RXDATA: Rx FIFO data
func (o *sifive_spi0_0_Type) SetRXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_0_Type) GetRXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.RXDATA.Reg) & 0xff
}
func (o *sifive_spi0_0_Type) SetRXDATA_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_spi0_0_Type) GetRXDATA_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RXDATA.Reg) & 0x80000000) >> 31
}

// sifive_spi0_0.TXMARK: Tx FIFO watermark
func (o *sifive_spi0_0_Type) SetTXMARK(value uint32) {
	volatile.StoreUint32(&o.TXMARK.Reg, volatile.LoadUint32(&o.TXMARK.Reg)&^(0x7)|value)
}
func (o *sifive_spi0_0_Type) GetTXMARK() uint32 {
	return volatile.LoadUint32(&o.TXMARK.Reg) & 0x7
}

// sifive_spi0_0.RXMARK: Rx FIFO watermark
func (o *sifive_spi0_0_Type) SetRXMARK(value uint32) {
	volatile.StoreUint32(&o.RXMARK.Reg, volatile.LoadUint32(&o.RXMARK.Reg)&^(0x7)|value)
}
func (o *sifive_spi0_0_Type) GetRXMARK() uint32 {
	return volatile.LoadUint32(&o.RXMARK.Reg) & 0x7
}

// sifive_spi0_0.FCTRL: SPI flash interface control
func (o *sifive_spi0_0_Type) SetFCTRL_EN(value uint32) {
	volatile.StoreUint32(&o.FCTRL.Reg, volatile.LoadUint32(&o.FCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_0_Type) GetFCTRL_EN() uint32 {
	return volatile.LoadUint32(&o.FCTRL.Reg) & 0x1
}

// sifive_spi0_0.FFMT: SPI flash instruction format
func (o *sifive_spi0_0_Type) SetFFMT_CMD_EN(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_0_Type) GetFFMT_CMD_EN() uint32 {
	return volatile.LoadUint32(&o.FFMT.Reg) & 0x1
}
func (o *sifive_spi0_0_Type) SetFFMT_ADDR_LEN(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xe)|value<<1)
}
func (o *sifive_spi0_0_Type) GetFFMT_ADDR_LEN() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xe) >> 1
}
func (o *sifive_spi0_0_Type) SetFFMT_PAD_CNT(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xf0)|value<<4)
}
func (o *sifive_spi0_0_Type) GetFFMT_PAD_CNT() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xf0) >> 4
}
func (o *sifive_spi0_0_Type) SetFFMT_CMD_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x300)|value<<8)
}
func (o *sifive_spi0_0_Type) GetFFMT_CMD_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0x300) >> 8
}
func (o *sifive_spi0_0_Type) SetFFMT_ADDR_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xc00)|value<<10)
}
func (o *sifive_spi0_0_Type) GetFFMT_ADDR_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xc00) >> 10
}
func (o *sifive_spi0_0_Type) SetFFMT_DATA_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x3000)|value<<12)
}
func (o *sifive_spi0_0_Type) GetFFMT_DATA_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0x3000) >> 12
}
func (o *sifive_spi0_0_Type) SetFFMT_CMD_CODE(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_0_Type) GetFFMT_CMD_CODE() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xff0000) >> 16
}
func (o *sifive_spi0_0_Type) SetFFMT_PAD_CODE(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xff000000)|value<<24)
}
func (o *sifive_spi0_0_Type) GetFFMT_PAD_CODE() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xff000000) >> 24
}

// sifive_spi0_0.IE: SPI interrupt enable
func (o *sifive_spi0_0_Type) SetIE_TXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_0_Type) GetIE_TXWM() uint32 {
	return volatile.LoadUint32(&o.IE.Reg) & 0x1
}
func (o *sifive_spi0_0_Type) SetIE_RXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_0_Type) GetIE_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IE.Reg) & 0x2) >> 1
}

// sifive_spi0_0.IP: SPI interrupt pending
func (o *sifive_spi0_0_Type) SetIP_TXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_0_Type) GetIP_TXWM() uint32 {
	return volatile.LoadUint32(&o.IP.Reg) & 0x1
}
func (o *sifive_spi0_0_Type) SetIP_RXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_0_Type) GetIP_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IP.Reg) & 0x2) >> 1
}

// From sifive,spi0,control peripheral generator
type sifive_spi0_1_Type struct {
	SCKDIV    volatile.Register32 // 0x0
	SCKMODE   volatile.Register32 // 0x4
	_         [8]byte
	CSID      volatile.Register32 // 0x10
	CSDEF     volatile.Register32 // 0x14
	CSMODE    volatile.Register32 // 0x18
	_         [12]byte
	DELAY0    volatile.Register32 // 0x28
	DELAY1    volatile.Register32 // 0x2C
	_         [8]byte
	EXTRADEL  volatile.Register32 // 0x38
	SAMPLEDEL volatile.Register32 // 0x3C
	FMT       volatile.Register32 // 0x40
	_         [4]byte
	TXDATA    volatile.Register32 // 0x48
	RXDATA    volatile.Register32 // 0x4C
	TXMARK    volatile.Register32 // 0x50
	RXMARK    volatile.Register32 // 0x54
	_         [8]byte
	FCTRL     volatile.Register32 // 0x60
	FFMT      volatile.Register32 // 0x64
	_         [8]byte
	IE        volatile.Register32 // 0x70
	IP        volatile.Register32 // 0x74
}

// sifive_spi0_1.SCKDIV: Serial clock divisor
func (o *sifive_spi0_1_Type) SetSCKDIV_DIV(value uint32) {
	volatile.StoreUint32(&o.SCKDIV.Reg, volatile.LoadUint32(&o.SCKDIV.Reg)&^(0xfff)|value)
}
func (o *sifive_spi0_1_Type) GetSCKDIV_DIV() uint32 {
	return volatile.LoadUint32(&o.SCKDIV.Reg) & 0xfff
}

// sifive_spi0_1.SCKMODE: Serial clock mode
func (o *sifive_spi0_1_Type) SetSCKMODE_PHA(value uint32) {
	volatile.StoreUint32(&o.SCKMODE.Reg, volatile.LoadUint32(&o.SCKMODE.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_1_Type) GetSCKMODE_PHA() uint32 {
	return volatile.LoadUint32(&o.SCKMODE.Reg) & 0x1
}
func (o *sifive_spi0_1_Type) SetSCKMODE_POL(value uint32) {
	volatile.StoreUint32(&o.SCKMODE.Reg, volatile.LoadUint32(&o.SCKMODE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_1_Type) GetSCKMODE_POL() uint32 {
	return (volatile.LoadUint32(&o.SCKMODE.Reg) & 0x2) >> 1
}

// sifive_spi0_1.CSID: Chip select ID
func (o *sifive_spi0_1_Type) SetCSID(value uint32) {
	volatile.StoreUint32(&o.CSID.Reg, value)
}
func (o *sifive_spi0_1_Type) GetCSID() uint32 {
	return volatile.LoadUint32(&o.CSID.Reg)
}

// sifive_spi0_1.CSDEF: Chip select default
func (o *sifive_spi0_1_Type) SetCSDEF(value uint32) {
	volatile.StoreUint32(&o.CSDEF.Reg, value)
}
func (o *sifive_spi0_1_Type) GetCSDEF() uint32 {
	return volatile.LoadUint32(&o.CSDEF.Reg)
}

// sifive_spi0_1.CSMODE: Chip select mode
func (o *sifive_spi0_1_Type) SetCSMODE_MODE(value uint32) {
	volatile.StoreUint32(&o.CSMODE.Reg, volatile.LoadUint32(&o.CSMODE.Reg)&^(0x3)|value)
}
func (o *sifive_spi0_1_Type) GetCSMODE_MODE() uint32 {
	return volatile.LoadUint32(&o.CSMODE.Reg) & 0x3
}

// sifive_spi0_1.DELAY0: Delay control 0
func (o *sifive_spi0_1_Type) SetDELAY0_CSSCK(value uint32) {
	volatile.StoreUint32(&o.DELAY0.Reg, volatile.LoadUint32(&o.DELAY0.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_1_Type) GetDELAY0_CSSCK() uint32 {
	return volatile.LoadUint32(&o.DELAY0.Reg) & 0xff
}
func (o *sifive_spi0_1_Type) SetDELAY0_SCKCS(value uint32) {
	volatile.StoreUint32(&o.DELAY0.Reg, volatile.LoadUint32(&o.DELAY0.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_1_Type) GetDELAY0_SCKCS() uint32 {
	return (volatile.LoadUint32(&o.DELAY0.Reg) & 0xff0000) >> 16
}

// sifive_spi0_1.DELAY1: Delay control 1
func (o *sifive_spi0_1_Type) SetDELAY1_INTERCS(value uint32) {
	volatile.StoreUint32(&o.DELAY1.Reg, volatile.LoadUint32(&o.DELAY1.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_1_Type) GetDELAY1_INTERCS() uint32 {
	return volatile.LoadUint32(&o.DELAY1.Reg) & 0xff
}
func (o *sifive_spi0_1_Type) SetDELAY1_INTERXFR(value uint32) {
	volatile.StoreUint32(&o.DELAY1.Reg, volatile.LoadUint32(&o.DELAY1.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_1_Type) GetDELAY1_INTERXFR() uint32 {
	return (volatile.LoadUint32(&o.DELAY1.Reg) & 0xff0000) >> 16
}

// sifive_spi0_1.EXTRADEL: SPI extra sampling delay to increase the SPI frequency
func (o *sifive_spi0_1_Type) SetEXTRADEL_COARSE(value uint32) {
	volatile.StoreUint32(&o.EXTRADEL.Reg, volatile.LoadUint32(&o.EXTRADEL.Reg)&^(0xfff)|value)
}
func (o *sifive_spi0_1_Type) GetEXTRADEL_COARSE() uint32 {
	return volatile.LoadUint32(&o.EXTRADEL.Reg) & 0xfff
}
func (o *sifive_spi0_1_Type) SetEXTRADEL_FINE(value uint32) {
	volatile.StoreUint32(&o.EXTRADEL.Reg, volatile.LoadUint32(&o.EXTRADEL.Reg)&^(0x1f000)|value<<12)
}
func (o *sifive_spi0_1_Type) GetEXTRADEL_FINE() uint32 {
	return (volatile.LoadUint32(&o.EXTRADEL.Reg) & 0x1f000) >> 12
}

// sifive_spi0_1.SAMPLEDEL: Number of delay stages from slave to the SPI controller
func (o *sifive_spi0_1_Type) SetSAMPLEDEL_SD(value uint32) {
	volatile.StoreUint32(&o.SAMPLEDEL.Reg, volatile.LoadUint32(&o.SAMPLEDEL.Reg)&^(0x1f)|value)
}
func (o *sifive_spi0_1_Type) GetSAMPLEDEL_SD() uint32 {
	return volatile.LoadUint32(&o.SAMPLEDEL.Reg) & 0x1f
}

// sifive_spi0_1.FMT: Frame format
func (o *sifive_spi0_1_Type) SetFMT_PROTO(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x3)|value)
}
func (o *sifive_spi0_1_Type) GetFMT_PROTO() uint32 {
	return volatile.LoadUint32(&o.FMT.Reg) & 0x3
}
func (o *sifive_spi0_1_Type) SetFMT_ENDIAN(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x4)|value<<2)
}
func (o *sifive_spi0_1_Type) GetFMT_ENDIAN() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0x4) >> 2
}
func (o *sifive_spi0_1_Type) SetFMT_DIR(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x8)|value<<3)
}
func (o *sifive_spi0_1_Type) GetFMT_DIR() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0x8) >> 3
}
func (o *sifive_spi0_1_Type) SetFMT_LEN(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0xf0000)|value<<16)
}
func (o *sifive_spi0_1_Type) GetFMT_LEN() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0xf0000) >> 16
}

// sifive_spi0_1.TXDATA: Tx FIFO Data
func (o *sifive_spi0_1_Type) SetTXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_1_Type) GetTXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.TXDATA.Reg) & 0xff
}
func (o *sifive_spi0_1_Type) SetTXDATA_FULL(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_spi0_1_Type) GetTXDATA_FULL() uint32 {
	return (volatile.LoadUint32(&o.TXDATA.Reg) & 0x80000000) >> 31
}

// sifive_spi0_1.RXDATA: Rx FIFO data
func (o *sifive_spi0_1_Type) SetRXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_1_Type) GetRXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.RXDATA.Reg) & 0xff
}
func (o *sifive_spi0_1_Type) SetRXDATA_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_spi0_1_Type) GetRXDATA_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RXDATA.Reg) & 0x80000000) >> 31
}

// sifive_spi0_1.TXMARK: Tx FIFO watermark
func (o *sifive_spi0_1_Type) SetTXMARK(value uint32) {
	volatile.StoreUint32(&o.TXMARK.Reg, volatile.LoadUint32(&o.TXMARK.Reg)&^(0x7)|value)
}
func (o *sifive_spi0_1_Type) GetTXMARK() uint32 {
	return volatile.LoadUint32(&o.TXMARK.Reg) & 0x7
}

// sifive_spi0_1.RXMARK: Rx FIFO watermark
func (o *sifive_spi0_1_Type) SetRXMARK(value uint32) {
	volatile.StoreUint32(&o.RXMARK.Reg, volatile.LoadUint32(&o.RXMARK.Reg)&^(0x7)|value)
}
func (o *sifive_spi0_1_Type) GetRXMARK() uint32 {
	return volatile.LoadUint32(&o.RXMARK.Reg) & 0x7
}

// sifive_spi0_1.FCTRL: SPI flash interface control
func (o *sifive_spi0_1_Type) SetFCTRL_EN(value uint32) {
	volatile.StoreUint32(&o.FCTRL.Reg, volatile.LoadUint32(&o.FCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_1_Type) GetFCTRL_EN() uint32 {
	return volatile.LoadUint32(&o.FCTRL.Reg) & 0x1
}

// sifive_spi0_1.FFMT: SPI flash instruction format
func (o *sifive_spi0_1_Type) SetFFMT_CMD_EN(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_1_Type) GetFFMT_CMD_EN() uint32 {
	return volatile.LoadUint32(&o.FFMT.Reg) & 0x1
}
func (o *sifive_spi0_1_Type) SetFFMT_ADDR_LEN(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xe)|value<<1)
}
func (o *sifive_spi0_1_Type) GetFFMT_ADDR_LEN() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xe) >> 1
}
func (o *sifive_spi0_1_Type) SetFFMT_PAD_CNT(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xf0)|value<<4)
}
func (o *sifive_spi0_1_Type) GetFFMT_PAD_CNT() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xf0) >> 4
}
func (o *sifive_spi0_1_Type) SetFFMT_CMD_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x300)|value<<8)
}
func (o *sifive_spi0_1_Type) GetFFMT_CMD_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0x300) >> 8
}
func (o *sifive_spi0_1_Type) SetFFMT_ADDR_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xc00)|value<<10)
}
func (o *sifive_spi0_1_Type) GetFFMT_ADDR_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xc00) >> 10
}
func (o *sifive_spi0_1_Type) SetFFMT_DATA_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x3000)|value<<12)
}
func (o *sifive_spi0_1_Type) GetFFMT_DATA_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0x3000) >> 12
}
func (o *sifive_spi0_1_Type) SetFFMT_CMD_CODE(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_1_Type) GetFFMT_CMD_CODE() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xff0000) >> 16
}
func (o *sifive_spi0_1_Type) SetFFMT_PAD_CODE(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xff000000)|value<<24)
}
func (o *sifive_spi0_1_Type) GetFFMT_PAD_CODE() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xff000000) >> 24
}

// sifive_spi0_1.IE: SPI interrupt enable
func (o *sifive_spi0_1_Type) SetIE_TXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_1_Type) GetIE_TXWM() uint32 {
	return volatile.LoadUint32(&o.IE.Reg) & 0x1
}
func (o *sifive_spi0_1_Type) SetIE_RXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_1_Type) GetIE_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IE.Reg) & 0x2) >> 1
}

// sifive_spi0_1.IP: SPI interrupt pending
func (o *sifive_spi0_1_Type) SetIP_TXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_1_Type) GetIP_TXWM() uint32 {
	return volatile.LoadUint32(&o.IP.Reg) & 0x1
}
func (o *sifive_spi0_1_Type) SetIP_RXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_1_Type) GetIP_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IP.Reg) & 0x2) >> 1
}

// From sifive,spi0,control peripheral generator
type sifive_spi0_2_Type struct {
	SCKDIV    volatile.Register32 // 0x0
	SCKMODE   volatile.Register32 // 0x4
	_         [8]byte
	CSID      volatile.Register32 // 0x10
	CSDEF     volatile.Register32 // 0x14
	CSMODE    volatile.Register32 // 0x18
	_         [12]byte
	DELAY0    volatile.Register32 // 0x28
	DELAY1    volatile.Register32 // 0x2C
	_         [8]byte
	EXTRADEL  volatile.Register32 // 0x38
	SAMPLEDEL volatile.Register32 // 0x3C
	FMT       volatile.Register32 // 0x40
	_         [4]byte
	TXDATA    volatile.Register32 // 0x48
	RXDATA    volatile.Register32 // 0x4C
	TXMARK    volatile.Register32 // 0x50
	RXMARK    volatile.Register32 // 0x54
	_         [8]byte
	FCTRL     volatile.Register32 // 0x60
	FFMT      volatile.Register32 // 0x64
	_         [8]byte
	IE        volatile.Register32 // 0x70
	IP        volatile.Register32 // 0x74
}

// sifive_spi0_2.SCKDIV: Serial clock divisor
func (o *sifive_spi0_2_Type) SetSCKDIV_DIV(value uint32) {
	volatile.StoreUint32(&o.SCKDIV.Reg, volatile.LoadUint32(&o.SCKDIV.Reg)&^(0xfff)|value)
}
func (o *sifive_spi0_2_Type) GetSCKDIV_DIV() uint32 {
	return volatile.LoadUint32(&o.SCKDIV.Reg) & 0xfff
}

// sifive_spi0_2.SCKMODE: Serial clock mode
func (o *sifive_spi0_2_Type) SetSCKMODE_PHA(value uint32) {
	volatile.StoreUint32(&o.SCKMODE.Reg, volatile.LoadUint32(&o.SCKMODE.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_2_Type) GetSCKMODE_PHA() uint32 {
	return volatile.LoadUint32(&o.SCKMODE.Reg) & 0x1
}
func (o *sifive_spi0_2_Type) SetSCKMODE_POL(value uint32) {
	volatile.StoreUint32(&o.SCKMODE.Reg, volatile.LoadUint32(&o.SCKMODE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_2_Type) GetSCKMODE_POL() uint32 {
	return (volatile.LoadUint32(&o.SCKMODE.Reg) & 0x2) >> 1
}

// sifive_spi0_2.CSID: Chip select ID
func (o *sifive_spi0_2_Type) SetCSID(value uint32) {
	volatile.StoreUint32(&o.CSID.Reg, value)
}
func (o *sifive_spi0_2_Type) GetCSID() uint32 {
	return volatile.LoadUint32(&o.CSID.Reg)
}

// sifive_spi0_2.CSDEF: Chip select default
func (o *sifive_spi0_2_Type) SetCSDEF(value uint32) {
	volatile.StoreUint32(&o.CSDEF.Reg, value)
}
func (o *sifive_spi0_2_Type) GetCSDEF() uint32 {
	return volatile.LoadUint32(&o.CSDEF.Reg)
}

// sifive_spi0_2.CSMODE: Chip select mode
func (o *sifive_spi0_2_Type) SetCSMODE_MODE(value uint32) {
	volatile.StoreUint32(&o.CSMODE.Reg, volatile.LoadUint32(&o.CSMODE.Reg)&^(0x3)|value)
}
func (o *sifive_spi0_2_Type) GetCSMODE_MODE() uint32 {
	return volatile.LoadUint32(&o.CSMODE.Reg) & 0x3
}

// sifive_spi0_2.DELAY0: Delay control 0
func (o *sifive_spi0_2_Type) SetDELAY0_CSSCK(value uint32) {
	volatile.StoreUint32(&o.DELAY0.Reg, volatile.LoadUint32(&o.DELAY0.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_2_Type) GetDELAY0_CSSCK() uint32 {
	return volatile.LoadUint32(&o.DELAY0.Reg) & 0xff
}
func (o *sifive_spi0_2_Type) SetDELAY0_SCKCS(value uint32) {
	volatile.StoreUint32(&o.DELAY0.Reg, volatile.LoadUint32(&o.DELAY0.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_2_Type) GetDELAY0_SCKCS() uint32 {
	return (volatile.LoadUint32(&o.DELAY0.Reg) & 0xff0000) >> 16
}

// sifive_spi0_2.DELAY1: Delay control 1
func (o *sifive_spi0_2_Type) SetDELAY1_INTERCS(value uint32) {
	volatile.StoreUint32(&o.DELAY1.Reg, volatile.LoadUint32(&o.DELAY1.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_2_Type) GetDELAY1_INTERCS() uint32 {
	return volatile.LoadUint32(&o.DELAY1.Reg) & 0xff
}
func (o *sifive_spi0_2_Type) SetDELAY1_INTERXFR(value uint32) {
	volatile.StoreUint32(&o.DELAY1.Reg, volatile.LoadUint32(&o.DELAY1.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_2_Type) GetDELAY1_INTERXFR() uint32 {
	return (volatile.LoadUint32(&o.DELAY1.Reg) & 0xff0000) >> 16
}

// sifive_spi0_2.EXTRADEL: SPI extra sampling delay to increase the SPI frequency
func (o *sifive_spi0_2_Type) SetEXTRADEL_COARSE(value uint32) {
	volatile.StoreUint32(&o.EXTRADEL.Reg, volatile.LoadUint32(&o.EXTRADEL.Reg)&^(0xfff)|value)
}
func (o *sifive_spi0_2_Type) GetEXTRADEL_COARSE() uint32 {
	return volatile.LoadUint32(&o.EXTRADEL.Reg) & 0xfff
}
func (o *sifive_spi0_2_Type) SetEXTRADEL_FINE(value uint32) {
	volatile.StoreUint32(&o.EXTRADEL.Reg, volatile.LoadUint32(&o.EXTRADEL.Reg)&^(0x1f000)|value<<12)
}
func (o *sifive_spi0_2_Type) GetEXTRADEL_FINE() uint32 {
	return (volatile.LoadUint32(&o.EXTRADEL.Reg) & 0x1f000) >> 12
}

// sifive_spi0_2.SAMPLEDEL: Number of delay stages from slave to the SPI controller
func (o *sifive_spi0_2_Type) SetSAMPLEDEL_SD(value uint32) {
	volatile.StoreUint32(&o.SAMPLEDEL.Reg, volatile.LoadUint32(&o.SAMPLEDEL.Reg)&^(0x1f)|value)
}
func (o *sifive_spi0_2_Type) GetSAMPLEDEL_SD() uint32 {
	return volatile.LoadUint32(&o.SAMPLEDEL.Reg) & 0x1f
}

// sifive_spi0_2.FMT: Frame format
func (o *sifive_spi0_2_Type) SetFMT_PROTO(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x3)|value)
}
func (o *sifive_spi0_2_Type) GetFMT_PROTO() uint32 {
	return volatile.LoadUint32(&o.FMT.Reg) & 0x3
}
func (o *sifive_spi0_2_Type) SetFMT_ENDIAN(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x4)|value<<2)
}
func (o *sifive_spi0_2_Type) GetFMT_ENDIAN() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0x4) >> 2
}
func (o *sifive_spi0_2_Type) SetFMT_DIR(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0x8)|value<<3)
}
func (o *sifive_spi0_2_Type) GetFMT_DIR() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0x8) >> 3
}
func (o *sifive_spi0_2_Type) SetFMT_LEN(value uint32) {
	volatile.StoreUint32(&o.FMT.Reg, volatile.LoadUint32(&o.FMT.Reg)&^(0xf0000)|value<<16)
}
func (o *sifive_spi0_2_Type) GetFMT_LEN() uint32 {
	return (volatile.LoadUint32(&o.FMT.Reg) & 0xf0000) >> 16
}

// sifive_spi0_2.TXDATA: Tx FIFO Data
func (o *sifive_spi0_2_Type) SetTXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_2_Type) GetTXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.TXDATA.Reg) & 0xff
}
func (o *sifive_spi0_2_Type) SetTXDATA_FULL(value uint32) {
	volatile.StoreUint32(&o.TXDATA.Reg, volatile.LoadUint32(&o.TXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_spi0_2_Type) GetTXDATA_FULL() uint32 {
	return (volatile.LoadUint32(&o.TXDATA.Reg) & 0x80000000) >> 31
}

// sifive_spi0_2.RXDATA: Rx FIFO data
func (o *sifive_spi0_2_Type) SetRXDATA_DATA(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0xff)|value)
}
func (o *sifive_spi0_2_Type) GetRXDATA_DATA() uint32 {
	return volatile.LoadUint32(&o.RXDATA.Reg) & 0xff
}
func (o *sifive_spi0_2_Type) SetRXDATA_EMPTY(value uint32) {
	volatile.StoreUint32(&o.RXDATA.Reg, volatile.LoadUint32(&o.RXDATA.Reg)&^(0x80000000)|value<<31)
}
func (o *sifive_spi0_2_Type) GetRXDATA_EMPTY() uint32 {
	return (volatile.LoadUint32(&o.RXDATA.Reg) & 0x80000000) >> 31
}

// sifive_spi0_2.TXMARK: Tx FIFO watermark
func (o *sifive_spi0_2_Type) SetTXMARK(value uint32) {
	volatile.StoreUint32(&o.TXMARK.Reg, volatile.LoadUint32(&o.TXMARK.Reg)&^(0x7)|value)
}
func (o *sifive_spi0_2_Type) GetTXMARK() uint32 {
	return volatile.LoadUint32(&o.TXMARK.Reg) & 0x7
}

// sifive_spi0_2.RXMARK: Rx FIFO watermark
func (o *sifive_spi0_2_Type) SetRXMARK(value uint32) {
	volatile.StoreUint32(&o.RXMARK.Reg, volatile.LoadUint32(&o.RXMARK.Reg)&^(0x7)|value)
}
func (o *sifive_spi0_2_Type) GetRXMARK() uint32 {
	return volatile.LoadUint32(&o.RXMARK.Reg) & 0x7
}

// sifive_spi0_2.FCTRL: SPI flash interface control
func (o *sifive_spi0_2_Type) SetFCTRL_EN(value uint32) {
	volatile.StoreUint32(&o.FCTRL.Reg, volatile.LoadUint32(&o.FCTRL.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_2_Type) GetFCTRL_EN() uint32 {
	return volatile.LoadUint32(&o.FCTRL.Reg) & 0x1
}

// sifive_spi0_2.FFMT: SPI flash instruction format
func (o *sifive_spi0_2_Type) SetFFMT_CMD_EN(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_2_Type) GetFFMT_CMD_EN() uint32 {
	return volatile.LoadUint32(&o.FFMT.Reg) & 0x1
}
func (o *sifive_spi0_2_Type) SetFFMT_ADDR_LEN(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xe)|value<<1)
}
func (o *sifive_spi0_2_Type) GetFFMT_ADDR_LEN() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xe) >> 1
}
func (o *sifive_spi0_2_Type) SetFFMT_PAD_CNT(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xf0)|value<<4)
}
func (o *sifive_spi0_2_Type) GetFFMT_PAD_CNT() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xf0) >> 4
}
func (o *sifive_spi0_2_Type) SetFFMT_CMD_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x300)|value<<8)
}
func (o *sifive_spi0_2_Type) GetFFMT_CMD_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0x300) >> 8
}
func (o *sifive_spi0_2_Type) SetFFMT_ADDR_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xc00)|value<<10)
}
func (o *sifive_spi0_2_Type) GetFFMT_ADDR_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xc00) >> 10
}
func (o *sifive_spi0_2_Type) SetFFMT_DATA_PROTO(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0x3000)|value<<12)
}
func (o *sifive_spi0_2_Type) GetFFMT_DATA_PROTO() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0x3000) >> 12
}
func (o *sifive_spi0_2_Type) SetFFMT_CMD_CODE(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xff0000)|value<<16)
}
func (o *sifive_spi0_2_Type) GetFFMT_CMD_CODE() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xff0000) >> 16
}
func (o *sifive_spi0_2_Type) SetFFMT_PAD_CODE(value uint32) {
	volatile.StoreUint32(&o.FFMT.Reg, volatile.LoadUint32(&o.FFMT.Reg)&^(0xff000000)|value<<24)
}
func (o *sifive_spi0_2_Type) GetFFMT_PAD_CODE() uint32 {
	return (volatile.LoadUint32(&o.FFMT.Reg) & 0xff000000) >> 24
}

// sifive_spi0_2.IE: SPI interrupt enable
func (o *sifive_spi0_2_Type) SetIE_TXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_2_Type) GetIE_TXWM() uint32 {
	return volatile.LoadUint32(&o.IE.Reg) & 0x1
}
func (o *sifive_spi0_2_Type) SetIE_RXWM(value uint32) {
	volatile.StoreUint32(&o.IE.Reg, volatile.LoadUint32(&o.IE.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_2_Type) GetIE_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IE.Reg) & 0x2) >> 1
}

// sifive_spi0_2.IP: SPI interrupt pending
func (o *sifive_spi0_2_Type) SetIP_TXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x1)|value)
}
func (o *sifive_spi0_2_Type) GetIP_TXWM() uint32 {
	return volatile.LoadUint32(&o.IP.Reg) & 0x1
}
func (o *sifive_spi0_2_Type) SetIP_RXWM(value uint32) {
	volatile.StoreUint32(&o.IP.Reg, volatile.LoadUint32(&o.IP.Reg)&^(0x2)|value<<1)
}
func (o *sifive_spi0_2_Type) GetIP_RXWM() uint32 {
	return (volatile.LoadUint32(&o.IP.Reg) & 0x2) >> 1
}

// From sifive,test0,control peripheral generator
type sifive_test0_0_Type struct {
	FINISHER volatile.Register32 // 0x0
}

// sifive_test0_0.FINISHER: Test finisher register
func (o *sifive_test0_0_Type) SetFINISHER_STATUS(value uint32) {
	volatile.StoreUint32(&o.FINISHER.Reg, volatile.LoadUint32(&o.FINISHER.Reg)&^(0xffff)|value)
}
func (o *sifive_test0_0_Type) GetFINISHER_STATUS() uint32 {
	return volatile.LoadUint32(&o.FINISHER.Reg) & 0xffff
}
func (o *sifive_test0_0_Type) SetFINISHER_CODE(value uint32) {
	volatile.StoreUint32(&o.FINISHER.Reg, volatile.LoadUint32(&o.FINISHER.Reg)&^(0xffff0000)|value<<16)
}
func (o *sifive_test0_0_Type) GetFINISHER_CODE() uint32 {
	return (volatile.LoadUint32(&o.FINISHER.Reg) & 0xffff0000) >> 16
}

// Constants for sifive_ccache0_0: From sifive,ccache0,control peripheral generator
const (
	// CONFIG: Information about the Cache Configuration
	// Position of BANKS field.
	sifive_ccache0_0_CONFIG_BANKS_Pos = 0x0
	// Bit mask of BANKS field.
	sifive_ccache0_0_CONFIG_BANKS_Msk = 0xff
	// Position of WAYS field.
	sifive_ccache0_0_CONFIG_WAYS_Pos = 0x8
	// Bit mask of WAYS field.
	sifive_ccache0_0_CONFIG_WAYS_Msk = 0xff00
	// Position of LGSETS field.
	sifive_ccache0_0_CONFIG_LGSETS_Pos = 0x10
	// Bit mask of LGSETS field.
	sifive_ccache0_0_CONFIG_LGSETS_Msk = 0xff0000
	// Position of LGBLOCKBYTES field.
	sifive_ccache0_0_CONFIG_LGBLOCKBYTES_Pos = 0x18
	// Bit mask of LGBLOCKBYTES field.
	sifive_ccache0_0_CONFIG_LGBLOCKBYTES_Msk = 0xff000000
)

// Constants for riscv_clint0_0: From riscv,clint0,control peripheral generator
const ()

// Constants for sifive_gpio0_0: From sifive,gpio0,control peripheral generator
const ()

// Constants for sifive_i2c0_0: From sifive,i2c0,control peripheral generator
const (
	// CONTROL: Control register
	// Position of EN field.
	sifive_i2c0_0_CONTROL_EN_Pos = 0x6
	// Bit mask of EN field.
	sifive_i2c0_0_CONTROL_EN_Msk = 0x40
	// Bit EN.
	sifive_i2c0_0_CONTROL_EN = 0x40
	// Position of IEN field.
	sifive_i2c0_0_CONTROL_IEN_Pos = 0x7
	// Bit mask of IEN field.
	sifive_i2c0_0_CONTROL_IEN_Msk = 0x80
	// Bit IEN.
	sifive_i2c0_0_CONTROL_IEN = 0x80

	// COMMAND__STATUS: Command write and status read register
	// Position of WR_IACK__RD_IF field.
	sifive_i2c0_0_COMMAND__STATUS_WR_IACK__RD_IF_Pos = 0x0
	// Bit mask of WR_IACK__RD_IF field.
	sifive_i2c0_0_COMMAND__STATUS_WR_IACK__RD_IF_Msk = 0x1
	// Bit WR_IACK__RD_IF.
	sifive_i2c0_0_COMMAND__STATUS_WR_IACK__RD_IF = 0x1
	// Position of WR_RES__RD_TIP field.
	sifive_i2c0_0_COMMAND__STATUS_WR_RES__RD_TIP_Pos = 0x1
	// Bit mask of WR_RES__RD_TIP field.
	sifive_i2c0_0_COMMAND__STATUS_WR_RES__RD_TIP_Msk = 0x2
	// Bit WR_RES__RD_TIP.
	sifive_i2c0_0_COMMAND__STATUS_WR_RES__RD_TIP = 0x2
	// Position of WR_RES__RD_RES field.
	sifive_i2c0_0_COMMAND__STATUS_WR_RES__RD_RES_Pos = 0x2
	// Bit mask of WR_RES__RD_RES field.
	sifive_i2c0_0_COMMAND__STATUS_WR_RES__RD_RES_Msk = 0x4
	// Bit WR_RES__RD_RES.
	sifive_i2c0_0_COMMAND__STATUS_WR_RES__RD_RES = 0x4
	// Position of WR_ACK__RD_RES field.
	sifive_i2c0_0_COMMAND__STATUS_WR_ACK__RD_RES_Pos = 0x3
	// Bit mask of WR_ACK__RD_RES field.
	sifive_i2c0_0_COMMAND__STATUS_WR_ACK__RD_RES_Msk = 0x8
	// Bit WR_ACK__RD_RES.
	sifive_i2c0_0_COMMAND__STATUS_WR_ACK__RD_RES = 0x8
	// Position of WR_TXD__RD_RES field.
	sifive_i2c0_0_COMMAND__STATUS_WR_TXD__RD_RES_Pos = 0x4
	// Bit mask of WR_TXD__RD_RES field.
	sifive_i2c0_0_COMMAND__STATUS_WR_TXD__RD_RES_Msk = 0x10
	// Bit WR_TXD__RD_RES.
	sifive_i2c0_0_COMMAND__STATUS_WR_TXD__RD_RES = 0x10
	// Position of WR_RXD__RD_AL field.
	sifive_i2c0_0_COMMAND__STATUS_WR_RXD__RD_AL_Pos = 0x5
	// Bit mask of WR_RXD__RD_AL field.
	sifive_i2c0_0_COMMAND__STATUS_WR_RXD__RD_AL_Msk = 0x20
	// Bit WR_RXD__RD_AL.
	sifive_i2c0_0_COMMAND__STATUS_WR_RXD__RD_AL = 0x20
	// Position of WR_STO__RD_BUSY field.
	sifive_i2c0_0_COMMAND__STATUS_WR_STO__RD_BUSY_Pos = 0x6
	// Bit mask of WR_STO__RD_BUSY field.
	sifive_i2c0_0_COMMAND__STATUS_WR_STO__RD_BUSY_Msk = 0x40
	// Bit WR_STO__RD_BUSY.
	sifive_i2c0_0_COMMAND__STATUS_WR_STO__RD_BUSY = 0x40
	// Position of WR_STA__RD_RXACK field.
	sifive_i2c0_0_COMMAND__STATUS_WR_STA__RD_RXACK_Pos = 0x7
	// Bit mask of WR_STA__RD_RXACK field.
	sifive_i2c0_0_COMMAND__STATUS_WR_STA__RD_RXACK_Msk = 0x80
	// Bit WR_STA__RD_RXACK.
	sifive_i2c0_0_COMMAND__STATUS_WR_STA__RD_RXACK = 0x80
)

// Constants for sifive_i2c0_1: From sifive,i2c0,control peripheral generator
const (
	// CONTROL: Control register
	// Position of EN field.
	sifive_i2c0_1_CONTROL_EN_Pos = 0x6
	// Bit mask of EN field.
	sifive_i2c0_1_CONTROL_EN_Msk = 0x40
	// Bit EN.
	sifive_i2c0_1_CONTROL_EN = 0x40
	// Position of IEN field.
	sifive_i2c0_1_CONTROL_IEN_Pos = 0x7
	// Bit mask of IEN field.
	sifive_i2c0_1_CONTROL_IEN_Msk = 0x80
	// Bit IEN.
	sifive_i2c0_1_CONTROL_IEN = 0x80

	// COMMAND__STATUS: Command write and status read register
	// Position of WR_IACK__RD_IF field.
	sifive_i2c0_1_COMMAND__STATUS_WR_IACK__RD_IF_Pos = 0x0
	// Bit mask of WR_IACK__RD_IF field.
	sifive_i2c0_1_COMMAND__STATUS_WR_IACK__RD_IF_Msk = 0x1
	// Bit WR_IACK__RD_IF.
	sifive_i2c0_1_COMMAND__STATUS_WR_IACK__RD_IF = 0x1
	// Position of WR_RES__RD_TIP field.
	sifive_i2c0_1_COMMAND__STATUS_WR_RES__RD_TIP_Pos = 0x1
	// Bit mask of WR_RES__RD_TIP field.
	sifive_i2c0_1_COMMAND__STATUS_WR_RES__RD_TIP_Msk = 0x2
	// Bit WR_RES__RD_TIP.
	sifive_i2c0_1_COMMAND__STATUS_WR_RES__RD_TIP = 0x2
	// Position of WR_RES__RD_RES field.
	sifive_i2c0_1_COMMAND__STATUS_WR_RES__RD_RES_Pos = 0x2
	// Bit mask of WR_RES__RD_RES field.
	sifive_i2c0_1_COMMAND__STATUS_WR_RES__RD_RES_Msk = 0x4
	// Bit WR_RES__RD_RES.
	sifive_i2c0_1_COMMAND__STATUS_WR_RES__RD_RES = 0x4
	// Position of WR_ACK__RD_RES field.
	sifive_i2c0_1_COMMAND__STATUS_WR_ACK__RD_RES_Pos = 0x3
	// Bit mask of WR_ACK__RD_RES field.
	sifive_i2c0_1_COMMAND__STATUS_WR_ACK__RD_RES_Msk = 0x8
	// Bit WR_ACK__RD_RES.
	sifive_i2c0_1_COMMAND__STATUS_WR_ACK__RD_RES = 0x8
	// Position of WR_TXD__RD_RES field.
	sifive_i2c0_1_COMMAND__STATUS_WR_TXD__RD_RES_Pos = 0x4
	// Bit mask of WR_TXD__RD_RES field.
	sifive_i2c0_1_COMMAND__STATUS_WR_TXD__RD_RES_Msk = 0x10
	// Bit WR_TXD__RD_RES.
	sifive_i2c0_1_COMMAND__STATUS_WR_TXD__RD_RES = 0x10
	// Position of WR_RXD__RD_AL field.
	sifive_i2c0_1_COMMAND__STATUS_WR_RXD__RD_AL_Pos = 0x5
	// Bit mask of WR_RXD__RD_AL field.
	sifive_i2c0_1_COMMAND__STATUS_WR_RXD__RD_AL_Msk = 0x20
	// Bit WR_RXD__RD_AL.
	sifive_i2c0_1_COMMAND__STATUS_WR_RXD__RD_AL = 0x20
	// Position of WR_STO__RD_BUSY field.
	sifive_i2c0_1_COMMAND__STATUS_WR_STO__RD_BUSY_Pos = 0x6
	// Bit mask of WR_STO__RD_BUSY field.
	sifive_i2c0_1_COMMAND__STATUS_WR_STO__RD_BUSY_Msk = 0x40
	// Bit WR_STO__RD_BUSY.
	sifive_i2c0_1_COMMAND__STATUS_WR_STO__RD_BUSY = 0x40
	// Position of WR_STA__RD_RXACK field.
	sifive_i2c0_1_COMMAND__STATUS_WR_STA__RD_RXACK_Pos = 0x7
	// Bit mask of WR_STA__RD_RXACK field.
	sifive_i2c0_1_COMMAND__STATUS_WR_STA__RD_RXACK_Msk = 0x80
	// Bit WR_STA__RD_RXACK.
	sifive_i2c0_1_COMMAND__STATUS_WR_STA__RD_RXACK = 0x80
)

// Constants for riscv_plic0_0: From riscv,plic0,control peripheral generator
const ()

// Constants for sifive_pwm0_0: From sifive,pwm0,control peripheral generator
const (
	// PWMCFG: PWM configuration register
	// Position of PWMSCALE field.
	sifive_pwm0_0_PWMCFG_PWMSCALE_Pos = 0x0
	// Bit mask of PWMSCALE field.
	sifive_pwm0_0_PWMCFG_PWMSCALE_Msk = 0xf
	// Position of PWMSTICKY field.
	sifive_pwm0_0_PWMCFG_PWMSTICKY_Pos = 0x8
	// Bit mask of PWMSTICKY field.
	sifive_pwm0_0_PWMCFG_PWMSTICKY_Msk = 0x100
	// Bit PWMSTICKY.
	sifive_pwm0_0_PWMCFG_PWMSTICKY = 0x100
	// Position of PWMZEROCMP field.
	sifive_pwm0_0_PWMCFG_PWMZEROCMP_Pos = 0x9
	// Bit mask of PWMZEROCMP field.
	sifive_pwm0_0_PWMCFG_PWMZEROCMP_Msk = 0x200
	// Bit PWMZEROCMP.
	sifive_pwm0_0_PWMCFG_PWMZEROCMP = 0x200
	// Position of PWMDEGLITCH field.
	sifive_pwm0_0_PWMCFG_PWMDEGLITCH_Pos = 0xa
	// Bit mask of PWMDEGLITCH field.
	sifive_pwm0_0_PWMCFG_PWMDEGLITCH_Msk = 0x400
	// Bit PWMDEGLITCH.
	sifive_pwm0_0_PWMCFG_PWMDEGLITCH = 0x400
	// Position of PWMENALWAYS field.
	sifive_pwm0_0_PWMCFG_PWMENALWAYS_Pos = 0xc
	// Bit mask of PWMENALWAYS field.
	sifive_pwm0_0_PWMCFG_PWMENALWAYS_Msk = 0x1000
	// Bit PWMENALWAYS.
	sifive_pwm0_0_PWMCFG_PWMENALWAYS = 0x1000
	// Position of PWMENONESHOT field.
	sifive_pwm0_0_PWMCFG_PWMENONESHOT_Pos = 0xd
	// Bit mask of PWMENONESHOT field.
	sifive_pwm0_0_PWMCFG_PWMENONESHOT_Msk = 0x2000
	// Bit PWMENONESHOT.
	sifive_pwm0_0_PWMCFG_PWMENONESHOT = 0x2000
	// Position of PWMCMP0CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP0CENTER_Pos = 0x10
	// Bit mask of PWMCMP0CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP0CENTER_Msk = 0x10000
	// Bit PWMCMP0CENTER.
	sifive_pwm0_0_PWMCFG_PWMCMP0CENTER = 0x10000
	// Position of PWMCMP1CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP1CENTER_Pos = 0x11
	// Bit mask of PWMCMP1CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP1CENTER_Msk = 0x20000
	// Bit PWMCMP1CENTER.
	sifive_pwm0_0_PWMCFG_PWMCMP1CENTER = 0x20000
	// Position of PWMCMP2CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP2CENTER_Pos = 0x12
	// Bit mask of PWMCMP2CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP2CENTER_Msk = 0x40000
	// Bit PWMCMP2CENTER.
	sifive_pwm0_0_PWMCFG_PWMCMP2CENTER = 0x40000
	// Position of PWMCMP3CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP3CENTER_Pos = 0x13
	// Bit mask of PWMCMP3CENTER field.
	sifive_pwm0_0_PWMCFG_PWMCMP3CENTER_Msk = 0x80000
	// Bit PWMCMP3CENTER.
	sifive_pwm0_0_PWMCFG_PWMCMP3CENTER = 0x80000
	// Position of PWMCMP0INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP0INVERT_Pos = 0x14
	// Bit mask of PWMCMP0INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP0INVERT_Msk = 0x100000
	// Bit PWMCMP0INVERT.
	sifive_pwm0_0_PWMCFG_PWMCMP0INVERT = 0x100000
	// Position of PWMCMP1INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP1INVERT_Pos = 0x15
	// Bit mask of PWMCMP1INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP1INVERT_Msk = 0x200000
	// Bit PWMCMP1INVERT.
	sifive_pwm0_0_PWMCFG_PWMCMP1INVERT = 0x200000
	// Position of PWMCMP2INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP2INVERT_Pos = 0x16
	// Bit mask of PWMCMP2INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP2INVERT_Msk = 0x400000
	// Bit PWMCMP2INVERT.
	sifive_pwm0_0_PWMCFG_PWMCMP2INVERT = 0x400000
	// Position of PWMCMP3INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP3INVERT_Pos = 0x17
	// Bit mask of PWMCMP3INVERT field.
	sifive_pwm0_0_PWMCFG_PWMCMP3INVERT_Msk = 0x800000
	// Bit PWMCMP3INVERT.
	sifive_pwm0_0_PWMCFG_PWMCMP3INVERT = 0x800000
	// Position of PWMCMP0GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP0GANG_Pos = 0x18
	// Bit mask of PWMCMP0GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP0GANG_Msk = 0x1000000
	// Bit PWMCMP0GANG.
	sifive_pwm0_0_PWMCFG_PWMCMP0GANG = 0x1000000
	// Position of PWMCMP1GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP1GANG_Pos = 0x19
	// Bit mask of PWMCMP1GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP1GANG_Msk = 0x2000000
	// Bit PWMCMP1GANG.
	sifive_pwm0_0_PWMCFG_PWMCMP1GANG = 0x2000000
	// Position of PWMCMP2GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP2GANG_Pos = 0x1a
	// Bit mask of PWMCMP2GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP2GANG_Msk = 0x4000000
	// Bit PWMCMP2GANG.
	sifive_pwm0_0_PWMCFG_PWMCMP2GANG = 0x4000000
	// Position of PWMCMP3GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP3GANG_Pos = 0x1b
	// Bit mask of PWMCMP3GANG field.
	sifive_pwm0_0_PWMCFG_PWMCMP3GANG_Msk = 0x8000000
	// Bit PWMCMP3GANG.
	sifive_pwm0_0_PWMCFG_PWMCMP3GANG = 0x8000000
	// Position of PWMCMP0IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP0IP_Pos = 0x1c
	// Bit mask of PWMCMP0IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP0IP_Msk = 0x10000000
	// Bit PWMCMP0IP.
	sifive_pwm0_0_PWMCFG_PWMCMP0IP = 0x10000000
	// Position of PWMCMP1IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP1IP_Pos = 0x1d
	// Bit mask of PWMCMP1IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP1IP_Msk = 0x20000000
	// Bit PWMCMP1IP.
	sifive_pwm0_0_PWMCFG_PWMCMP1IP = 0x20000000
	// Position of PWMCMP2IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP2IP_Pos = 0x1e
	// Bit mask of PWMCMP2IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP2IP_Msk = 0x40000000
	// Bit PWMCMP2IP.
	sifive_pwm0_0_PWMCFG_PWMCMP2IP = 0x40000000
	// Position of PWMCMP3IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP3IP_Pos = 0x1f
	// Bit mask of PWMCMP3IP field.
	sifive_pwm0_0_PWMCFG_PWMCMP3IP_Msk = 0x80000000
	// Bit PWMCMP3IP.
	sifive_pwm0_0_PWMCFG_PWMCMP3IP = 0x80000000

	// PWMCOUNT: PWM count register
	// Position of PWMCOUNT field.
	sifive_pwm0_0_PWMCOUNT_PWMCOUNT_Pos = 0x0
	// Bit mask of PWMCOUNT field.
	sifive_pwm0_0_PWMCOUNT_PWMCOUNT_Msk = 0x7fffffff

	// PWMS: Scaled PWM count register
	// Position of PWMS field.
	sifive_pwm0_0_PWMS_PWMS_Pos = 0x0
	// Bit mask of PWMS field.
	sifive_pwm0_0_PWMS_PWMS_Msk = 0xffff

	// PWMCMP0: PWM 0 compare register
	// Position of PWMCMP0 field.
	sifive_pwm0_0_PWMCMP0_PWMCMP0_Pos = 0x0
	// Bit mask of PWMCMP0 field.
	sifive_pwm0_0_PWMCMP0_PWMCMP0_Msk = 0xffff

	// PWMCMP1: PWM 1 compare register
	// Position of PWMCMP1 field.
	sifive_pwm0_0_PWMCMP1_PWMCMP1_Pos = 0x0
	// Bit mask of PWMCMP1 field.
	sifive_pwm0_0_PWMCMP1_PWMCMP1_Msk = 0xffff

	// PWMCMP2: PWM 2 compare register
	// Position of PWMCMP2 field.
	sifive_pwm0_0_PWMCMP2_PWMCMP2_Pos = 0x0
	// Bit mask of PWMCMP2 field.
	sifive_pwm0_0_PWMCMP2_PWMCMP2_Msk = 0xffff

	// PWMCMP3: PWM 3 compare register
	// Position of PWMCMP3 field.
	sifive_pwm0_0_PWMCMP3_PWMCMP3_Pos = 0x0
	// Bit mask of PWMCMP3 field.
	sifive_pwm0_0_PWMCMP3_PWMCMP3_Msk = 0xffff
)

// Constants for sifive_pwm0_1: From sifive,pwm0,control peripheral generator
const (
	// PWMCFG: PWM configuration register
	// Position of PWMSCALE field.
	sifive_pwm0_1_PWMCFG_PWMSCALE_Pos = 0x0
	// Bit mask of PWMSCALE field.
	sifive_pwm0_1_PWMCFG_PWMSCALE_Msk = 0xf
	// Position of PWMSTICKY field.
	sifive_pwm0_1_PWMCFG_PWMSTICKY_Pos = 0x8
	// Bit mask of PWMSTICKY field.
	sifive_pwm0_1_PWMCFG_PWMSTICKY_Msk = 0x100
	// Bit PWMSTICKY.
	sifive_pwm0_1_PWMCFG_PWMSTICKY = 0x100
	// Position of PWMZEROCMP field.
	sifive_pwm0_1_PWMCFG_PWMZEROCMP_Pos = 0x9
	// Bit mask of PWMZEROCMP field.
	sifive_pwm0_1_PWMCFG_PWMZEROCMP_Msk = 0x200
	// Bit PWMZEROCMP.
	sifive_pwm0_1_PWMCFG_PWMZEROCMP = 0x200
	// Position of PWMDEGLITCH field.
	sifive_pwm0_1_PWMCFG_PWMDEGLITCH_Pos = 0xa
	// Bit mask of PWMDEGLITCH field.
	sifive_pwm0_1_PWMCFG_PWMDEGLITCH_Msk = 0x400
	// Bit PWMDEGLITCH.
	sifive_pwm0_1_PWMCFG_PWMDEGLITCH = 0x400
	// Position of PWMENALWAYS field.
	sifive_pwm0_1_PWMCFG_PWMENALWAYS_Pos = 0xc
	// Bit mask of PWMENALWAYS field.
	sifive_pwm0_1_PWMCFG_PWMENALWAYS_Msk = 0x1000
	// Bit PWMENALWAYS.
	sifive_pwm0_1_PWMCFG_PWMENALWAYS = 0x1000
	// Position of PWMENONESHOT field.
	sifive_pwm0_1_PWMCFG_PWMENONESHOT_Pos = 0xd
	// Bit mask of PWMENONESHOT field.
	sifive_pwm0_1_PWMCFG_PWMENONESHOT_Msk = 0x2000
	// Bit PWMENONESHOT.
	sifive_pwm0_1_PWMCFG_PWMENONESHOT = 0x2000
	// Position of PWMCMP0CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP0CENTER_Pos = 0x10
	// Bit mask of PWMCMP0CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP0CENTER_Msk = 0x10000
	// Bit PWMCMP0CENTER.
	sifive_pwm0_1_PWMCFG_PWMCMP0CENTER = 0x10000
	// Position of PWMCMP1CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP1CENTER_Pos = 0x11
	// Bit mask of PWMCMP1CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP1CENTER_Msk = 0x20000
	// Bit PWMCMP1CENTER.
	sifive_pwm0_1_PWMCFG_PWMCMP1CENTER = 0x20000
	// Position of PWMCMP2CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP2CENTER_Pos = 0x12
	// Bit mask of PWMCMP2CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP2CENTER_Msk = 0x40000
	// Bit PWMCMP2CENTER.
	sifive_pwm0_1_PWMCFG_PWMCMP2CENTER = 0x40000
	// Position of PWMCMP3CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP3CENTER_Pos = 0x13
	// Bit mask of PWMCMP3CENTER field.
	sifive_pwm0_1_PWMCFG_PWMCMP3CENTER_Msk = 0x80000
	// Bit PWMCMP3CENTER.
	sifive_pwm0_1_PWMCFG_PWMCMP3CENTER = 0x80000
	// Position of PWMCMP0INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP0INVERT_Pos = 0x14
	// Bit mask of PWMCMP0INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP0INVERT_Msk = 0x100000
	// Bit PWMCMP0INVERT.
	sifive_pwm0_1_PWMCFG_PWMCMP0INVERT = 0x100000
	// Position of PWMCMP1INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP1INVERT_Pos = 0x15
	// Bit mask of PWMCMP1INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP1INVERT_Msk = 0x200000
	// Bit PWMCMP1INVERT.
	sifive_pwm0_1_PWMCFG_PWMCMP1INVERT = 0x200000
	// Position of PWMCMP2INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP2INVERT_Pos = 0x16
	// Bit mask of PWMCMP2INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP2INVERT_Msk = 0x400000
	// Bit PWMCMP2INVERT.
	sifive_pwm0_1_PWMCFG_PWMCMP2INVERT = 0x400000
	// Position of PWMCMP3INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP3INVERT_Pos = 0x17
	// Bit mask of PWMCMP3INVERT field.
	sifive_pwm0_1_PWMCFG_PWMCMP3INVERT_Msk = 0x800000
	// Bit PWMCMP3INVERT.
	sifive_pwm0_1_PWMCFG_PWMCMP3INVERT = 0x800000
	// Position of PWMCMP0GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP0GANG_Pos = 0x18
	// Bit mask of PWMCMP0GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP0GANG_Msk = 0x1000000
	// Bit PWMCMP0GANG.
	sifive_pwm0_1_PWMCFG_PWMCMP0GANG = 0x1000000
	// Position of PWMCMP1GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP1GANG_Pos = 0x19
	// Bit mask of PWMCMP1GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP1GANG_Msk = 0x2000000
	// Bit PWMCMP1GANG.
	sifive_pwm0_1_PWMCFG_PWMCMP1GANG = 0x2000000
	// Position of PWMCMP2GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP2GANG_Pos = 0x1a
	// Bit mask of PWMCMP2GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP2GANG_Msk = 0x4000000
	// Bit PWMCMP2GANG.
	sifive_pwm0_1_PWMCFG_PWMCMP2GANG = 0x4000000
	// Position of PWMCMP3GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP3GANG_Pos = 0x1b
	// Bit mask of PWMCMP3GANG field.
	sifive_pwm0_1_PWMCFG_PWMCMP3GANG_Msk = 0x8000000
	// Bit PWMCMP3GANG.
	sifive_pwm0_1_PWMCFG_PWMCMP3GANG = 0x8000000
	// Position of PWMCMP0IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP0IP_Pos = 0x1c
	// Bit mask of PWMCMP0IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP0IP_Msk = 0x10000000
	// Bit PWMCMP0IP.
	sifive_pwm0_1_PWMCFG_PWMCMP0IP = 0x10000000
	// Position of PWMCMP1IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP1IP_Pos = 0x1d
	// Bit mask of PWMCMP1IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP1IP_Msk = 0x20000000
	// Bit PWMCMP1IP.
	sifive_pwm0_1_PWMCFG_PWMCMP1IP = 0x20000000
	// Position of PWMCMP2IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP2IP_Pos = 0x1e
	// Bit mask of PWMCMP2IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP2IP_Msk = 0x40000000
	// Bit PWMCMP2IP.
	sifive_pwm0_1_PWMCFG_PWMCMP2IP = 0x40000000
	// Position of PWMCMP3IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP3IP_Pos = 0x1f
	// Bit mask of PWMCMP3IP field.
	sifive_pwm0_1_PWMCFG_PWMCMP3IP_Msk = 0x80000000
	// Bit PWMCMP3IP.
	sifive_pwm0_1_PWMCFG_PWMCMP3IP = 0x80000000

	// PWMCOUNT: PWM count register
	// Position of PWMCOUNT field.
	sifive_pwm0_1_PWMCOUNT_PWMCOUNT_Pos = 0x0
	// Bit mask of PWMCOUNT field.
	sifive_pwm0_1_PWMCOUNT_PWMCOUNT_Msk = 0x7fffffff

	// PWMS: Scaled PWM count register
	// Position of PWMS field.
	sifive_pwm0_1_PWMS_PWMS_Pos = 0x0
	// Bit mask of PWMS field.
	sifive_pwm0_1_PWMS_PWMS_Msk = 0xffff

	// PWMCMP0: PWM 0 compare register
	// Position of PWMCMP0 field.
	sifive_pwm0_1_PWMCMP0_PWMCMP0_Pos = 0x0
	// Bit mask of PWMCMP0 field.
	sifive_pwm0_1_PWMCMP0_PWMCMP0_Msk = 0xffff

	// PWMCMP1: PWM 1 compare register
	// Position of PWMCMP1 field.
	sifive_pwm0_1_PWMCMP1_PWMCMP1_Pos = 0x0
	// Bit mask of PWMCMP1 field.
	sifive_pwm0_1_PWMCMP1_PWMCMP1_Msk = 0xffff

	// PWMCMP2: PWM 2 compare register
	// Position of PWMCMP2 field.
	sifive_pwm0_1_PWMCMP2_PWMCMP2_Pos = 0x0
	// Bit mask of PWMCMP2 field.
	sifive_pwm0_1_PWMCMP2_PWMCMP2_Msk = 0xffff

	// PWMCMP3: PWM 3 compare register
	// Position of PWMCMP3 field.
	sifive_pwm0_1_PWMCMP3_PWMCMP3_Pos = 0x0
	// Bit mask of PWMCMP3 field.
	sifive_pwm0_1_PWMCMP3_PWMCMP3_Msk = 0xffff
)

// Constants for sifive_uart0_0: From sifive,uart0,control peripheral generator
const (
	// TXDATA: Transmit data register
	// Position of DATA field.
	sifive_uart0_0_TXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_uart0_0_TXDATA_DATA_Msk = 0xff
	// Position of FULL field.
	sifive_uart0_0_TXDATA_FULL_Pos = 0x1f
	// Bit mask of FULL field.
	sifive_uart0_0_TXDATA_FULL_Msk = 0x80000000
	// Bit FULL.
	sifive_uart0_0_TXDATA_FULL = 0x80000000

	// RXDATA: Receive data register
	// Position of DATA field.
	sifive_uart0_0_RXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_uart0_0_RXDATA_DATA_Msk = 0xff
	// Position of EMPTY field.
	sifive_uart0_0_RXDATA_EMPTY_Pos = 0x1f
	// Bit mask of EMPTY field.
	sifive_uart0_0_RXDATA_EMPTY_Msk = 0x80000000
	// Bit EMPTY.
	sifive_uart0_0_RXDATA_EMPTY = 0x80000000

	// TXCTRL: Transmit control register
	// Position of TXEN field.
	sifive_uart0_0_TXCTRL_TXEN_Pos = 0x0
	// Bit mask of TXEN field.
	sifive_uart0_0_TXCTRL_TXEN_Msk = 0x1
	// Bit TXEN.
	sifive_uart0_0_TXCTRL_TXEN = 0x1
	// Position of NSTOP field.
	sifive_uart0_0_TXCTRL_NSTOP_Pos = 0x1
	// Bit mask of NSTOP field.
	sifive_uart0_0_TXCTRL_NSTOP_Msk = 0x2
	// Bit NSTOP.
	sifive_uart0_0_TXCTRL_NSTOP = 0x2
	// Position of TXCNT field.
	sifive_uart0_0_TXCTRL_TXCNT_Pos = 0x10
	// Bit mask of TXCNT field.
	sifive_uart0_0_TXCTRL_TXCNT_Msk = 0x70000

	// RXCTRL: Receive control register
	// Position of RXEN field.
	sifive_uart0_0_RXCTRL_RXEN_Pos = 0x0
	// Bit mask of RXEN field.
	sifive_uart0_0_RXCTRL_RXEN_Msk = 0x1
	// Bit RXEN.
	sifive_uart0_0_RXCTRL_RXEN = 0x1
	// Position of RXCNT field.
	sifive_uart0_0_RXCTRL_RXCNT_Pos = 0x10
	// Bit mask of RXCNT field.
	sifive_uart0_0_RXCTRL_RXCNT_Msk = 0x70000

	// IE: UART interrupt enable
	// Position of TXWM field.
	sifive_uart0_0_IE_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_uart0_0_IE_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_uart0_0_IE_TXWM = 0x1
	// Position of RXWM field.
	sifive_uart0_0_IE_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_uart0_0_IE_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_uart0_0_IE_RXWM = 0x2

	// IP: UART interrupt pending
	// Position of TXWM field.
	sifive_uart0_0_IP_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_uart0_0_IP_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_uart0_0_IP_TXWM = 0x1
	// Position of RXWM field.
	sifive_uart0_0_IP_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_uart0_0_IP_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_uart0_0_IP_RXWM = 0x2

	// DIV: Baud rate divisor
	// Position of DIV field.
	sifive_uart0_0_DIV_DIV_Pos = 0x0
	// Bit mask of DIV field.
	sifive_uart0_0_DIV_DIV_Msk = 0xffff
)

// Constants for sifive_uart0_1: From sifive,uart0,control peripheral generator
const (
	// TXDATA: Transmit data register
	// Position of DATA field.
	sifive_uart0_1_TXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_uart0_1_TXDATA_DATA_Msk = 0xff
	// Position of FULL field.
	sifive_uart0_1_TXDATA_FULL_Pos = 0x1f
	// Bit mask of FULL field.
	sifive_uart0_1_TXDATA_FULL_Msk = 0x80000000
	// Bit FULL.
	sifive_uart0_1_TXDATA_FULL = 0x80000000

	// RXDATA: Receive data register
	// Position of DATA field.
	sifive_uart0_1_RXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_uart0_1_RXDATA_DATA_Msk = 0xff
	// Position of EMPTY field.
	sifive_uart0_1_RXDATA_EMPTY_Pos = 0x1f
	// Bit mask of EMPTY field.
	sifive_uart0_1_RXDATA_EMPTY_Msk = 0x80000000
	// Bit EMPTY.
	sifive_uart0_1_RXDATA_EMPTY = 0x80000000

	// TXCTRL: Transmit control register
	// Position of TXEN field.
	sifive_uart0_1_TXCTRL_TXEN_Pos = 0x0
	// Bit mask of TXEN field.
	sifive_uart0_1_TXCTRL_TXEN_Msk = 0x1
	// Bit TXEN.
	sifive_uart0_1_TXCTRL_TXEN = 0x1
	// Position of NSTOP field.
	sifive_uart0_1_TXCTRL_NSTOP_Pos = 0x1
	// Bit mask of NSTOP field.
	sifive_uart0_1_TXCTRL_NSTOP_Msk = 0x2
	// Bit NSTOP.
	sifive_uart0_1_TXCTRL_NSTOP = 0x2
	// Position of TXCNT field.
	sifive_uart0_1_TXCTRL_TXCNT_Pos = 0x10
	// Bit mask of TXCNT field.
	sifive_uart0_1_TXCTRL_TXCNT_Msk = 0x70000

	// RXCTRL: Receive control register
	// Position of RXEN field.
	sifive_uart0_1_RXCTRL_RXEN_Pos = 0x0
	// Bit mask of RXEN field.
	sifive_uart0_1_RXCTRL_RXEN_Msk = 0x1
	// Bit RXEN.
	sifive_uart0_1_RXCTRL_RXEN = 0x1
	// Position of RXCNT field.
	sifive_uart0_1_RXCTRL_RXCNT_Pos = 0x10
	// Bit mask of RXCNT field.
	sifive_uart0_1_RXCTRL_RXCNT_Msk = 0x70000

	// IE: UART interrupt enable
	// Position of TXWM field.
	sifive_uart0_1_IE_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_uart0_1_IE_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_uart0_1_IE_TXWM = 0x1
	// Position of RXWM field.
	sifive_uart0_1_IE_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_uart0_1_IE_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_uart0_1_IE_RXWM = 0x2

	// IP: UART interrupt pending
	// Position of TXWM field.
	sifive_uart0_1_IP_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_uart0_1_IP_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_uart0_1_IP_TXWM = 0x1
	// Position of RXWM field.
	sifive_uart0_1_IP_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_uart0_1_IP_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_uart0_1_IP_RXWM = 0x2

	// DIV: Baud rate divisor
	// Position of DIV field.
	sifive_uart0_1_DIV_DIV_Pos = 0x0
	// Bit mask of DIV field.
	sifive_uart0_1_DIV_DIV_Msk = 0xffff
)

// Constants for sifive_spi0_0: From sifive,spi0,control peripheral generator
const (
	// SCKDIV: Serial clock divisor
	// Position of DIV field.
	sifive_spi0_0_SCKDIV_DIV_Pos = 0x0
	// Bit mask of DIV field.
	sifive_spi0_0_SCKDIV_DIV_Msk = 0xfff

	// SCKMODE: Serial clock mode
	// Position of PHA field.
	sifive_spi0_0_SCKMODE_PHA_Pos = 0x0
	// Bit mask of PHA field.
	sifive_spi0_0_SCKMODE_PHA_Msk = 0x1
	// Bit PHA.
	sifive_spi0_0_SCKMODE_PHA = 0x1
	// Position of POL field.
	sifive_spi0_0_SCKMODE_POL_Pos = 0x1
	// Bit mask of POL field.
	sifive_spi0_0_SCKMODE_POL_Msk = 0x2
	// Bit POL.
	sifive_spi0_0_SCKMODE_POL = 0x2

	// CSID: Chip select ID
	// Position of CSID field.
	sifive_spi0_0_CSID_CSID_Pos = 0x0
	// Bit mask of CSID field.
	sifive_spi0_0_CSID_CSID_Msk = 0xffffffff

	// CSDEF: Chip select default
	// Position of CSDEF field.
	sifive_spi0_0_CSDEF_CSDEF_Pos = 0x0
	// Bit mask of CSDEF field.
	sifive_spi0_0_CSDEF_CSDEF_Msk = 0xffffffff

	// CSMODE: Chip select mode
	// Position of MODE field.
	sifive_spi0_0_CSMODE_MODE_Pos = 0x0
	// Bit mask of MODE field.
	sifive_spi0_0_CSMODE_MODE_Msk = 0x3

	// DELAY0: Delay control 0
	// Position of CSSCK field.
	sifive_spi0_0_DELAY0_CSSCK_Pos = 0x0
	// Bit mask of CSSCK field.
	sifive_spi0_0_DELAY0_CSSCK_Msk = 0xff
	// Position of SCKCS field.
	sifive_spi0_0_DELAY0_SCKCS_Pos = 0x10
	// Bit mask of SCKCS field.
	sifive_spi0_0_DELAY0_SCKCS_Msk = 0xff0000

	// DELAY1: Delay control 1
	// Position of INTERCS field.
	sifive_spi0_0_DELAY1_INTERCS_Pos = 0x0
	// Bit mask of INTERCS field.
	sifive_spi0_0_DELAY1_INTERCS_Msk = 0xff
	// Position of INTERXFR field.
	sifive_spi0_0_DELAY1_INTERXFR_Pos = 0x10
	// Bit mask of INTERXFR field.
	sifive_spi0_0_DELAY1_INTERXFR_Msk = 0xff0000

	// EXTRADEL: SPI extra sampling delay to increase the SPI frequency
	// Position of COARSE field.
	sifive_spi0_0_EXTRADEL_COARSE_Pos = 0x0
	// Bit mask of COARSE field.
	sifive_spi0_0_EXTRADEL_COARSE_Msk = 0xfff
	// Position of FINE field.
	sifive_spi0_0_EXTRADEL_FINE_Pos = 0xc
	// Bit mask of FINE field.
	sifive_spi0_0_EXTRADEL_FINE_Msk = 0x1f000

	// SAMPLEDEL: Number of delay stages from slave to the SPI controller
	// Position of SD field.
	sifive_spi0_0_SAMPLEDEL_SD_Pos = 0x0
	// Bit mask of SD field.
	sifive_spi0_0_SAMPLEDEL_SD_Msk = 0x1f

	// FMT: Frame format
	// Position of PROTO field.
	sifive_spi0_0_FMT_PROTO_Pos = 0x0
	// Bit mask of PROTO field.
	sifive_spi0_0_FMT_PROTO_Msk = 0x3
	// Position of ENDIAN field.
	sifive_spi0_0_FMT_ENDIAN_Pos = 0x2
	// Bit mask of ENDIAN field.
	sifive_spi0_0_FMT_ENDIAN_Msk = 0x4
	// Bit ENDIAN.
	sifive_spi0_0_FMT_ENDIAN = 0x4
	// Position of DIR field.
	sifive_spi0_0_FMT_DIR_Pos = 0x3
	// Bit mask of DIR field.
	sifive_spi0_0_FMT_DIR_Msk = 0x8
	// Bit DIR.
	sifive_spi0_0_FMT_DIR = 0x8
	// Position of LEN field.
	sifive_spi0_0_FMT_LEN_Pos = 0x10
	// Bit mask of LEN field.
	sifive_spi0_0_FMT_LEN_Msk = 0xf0000

	// TXDATA: Tx FIFO Data
	// Position of DATA field.
	sifive_spi0_0_TXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_spi0_0_TXDATA_DATA_Msk = 0xff
	// Position of FULL field.
	sifive_spi0_0_TXDATA_FULL_Pos = 0x1f
	// Bit mask of FULL field.
	sifive_spi0_0_TXDATA_FULL_Msk = 0x80000000
	// Bit FULL.
	sifive_spi0_0_TXDATA_FULL = 0x80000000

	// RXDATA: Rx FIFO data
	// Position of DATA field.
	sifive_spi0_0_RXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_spi0_0_RXDATA_DATA_Msk = 0xff
	// Position of EMPTY field.
	sifive_spi0_0_RXDATA_EMPTY_Pos = 0x1f
	// Bit mask of EMPTY field.
	sifive_spi0_0_RXDATA_EMPTY_Msk = 0x80000000
	// Bit EMPTY.
	sifive_spi0_0_RXDATA_EMPTY = 0x80000000

	// TXMARK: Tx FIFO watermark
	// Position of TXMARK field.
	sifive_spi0_0_TXMARK_TXMARK_Pos = 0x0
	// Bit mask of TXMARK field.
	sifive_spi0_0_TXMARK_TXMARK_Msk = 0x7

	// RXMARK: Rx FIFO watermark
	// Position of RXMARK field.
	sifive_spi0_0_RXMARK_RXMARK_Pos = 0x0
	// Bit mask of RXMARK field.
	sifive_spi0_0_RXMARK_RXMARK_Msk = 0x7

	// FCTRL: SPI flash interface control
	// Position of EN field.
	sifive_spi0_0_FCTRL_EN_Pos = 0x0
	// Bit mask of EN field.
	sifive_spi0_0_FCTRL_EN_Msk = 0x1
	// Bit EN.
	sifive_spi0_0_FCTRL_EN = 0x1

	// FFMT: SPI flash instruction format
	// Position of CMD_EN field.
	sifive_spi0_0_FFMT_CMD_EN_Pos = 0x0
	// Bit mask of CMD_EN field.
	sifive_spi0_0_FFMT_CMD_EN_Msk = 0x1
	// Bit CMD_EN.
	sifive_spi0_0_FFMT_CMD_EN = 0x1
	// Position of ADDR_LEN field.
	sifive_spi0_0_FFMT_ADDR_LEN_Pos = 0x1
	// Bit mask of ADDR_LEN field.
	sifive_spi0_0_FFMT_ADDR_LEN_Msk = 0xe
	// Position of PAD_CNT field.
	sifive_spi0_0_FFMT_PAD_CNT_Pos = 0x4
	// Bit mask of PAD_CNT field.
	sifive_spi0_0_FFMT_PAD_CNT_Msk = 0xf0
	// Position of CMD_PROTO field.
	sifive_spi0_0_FFMT_CMD_PROTO_Pos = 0x8
	// Bit mask of CMD_PROTO field.
	sifive_spi0_0_FFMT_CMD_PROTO_Msk = 0x300
	// Position of ADDR_PROTO field.
	sifive_spi0_0_FFMT_ADDR_PROTO_Pos = 0xa
	// Bit mask of ADDR_PROTO field.
	sifive_spi0_0_FFMT_ADDR_PROTO_Msk = 0xc00
	// Position of DATA_PROTO field.
	sifive_spi0_0_FFMT_DATA_PROTO_Pos = 0xc
	// Bit mask of DATA_PROTO field.
	sifive_spi0_0_FFMT_DATA_PROTO_Msk = 0x3000
	// Position of CMD_CODE field.
	sifive_spi0_0_FFMT_CMD_CODE_Pos = 0x10
	// Bit mask of CMD_CODE field.
	sifive_spi0_0_FFMT_CMD_CODE_Msk = 0xff0000
	// Position of PAD_CODE field.
	sifive_spi0_0_FFMT_PAD_CODE_Pos = 0x18
	// Bit mask of PAD_CODE field.
	sifive_spi0_0_FFMT_PAD_CODE_Msk = 0xff000000

	// IE: SPI interrupt enable
	// Position of TXWM field.
	sifive_spi0_0_IE_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_spi0_0_IE_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_spi0_0_IE_TXWM = 0x1
	// Position of RXWM field.
	sifive_spi0_0_IE_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_spi0_0_IE_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_spi0_0_IE_RXWM = 0x2

	// IP: SPI interrupt pending
	// Position of TXWM field.
	sifive_spi0_0_IP_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_spi0_0_IP_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_spi0_0_IP_TXWM = 0x1
	// Position of RXWM field.
	sifive_spi0_0_IP_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_spi0_0_IP_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_spi0_0_IP_RXWM = 0x2
)

// Constants for sifive_spi0_1: From sifive,spi0,control peripheral generator
const (
	// SCKDIV: Serial clock divisor
	// Position of DIV field.
	sifive_spi0_1_SCKDIV_DIV_Pos = 0x0
	// Bit mask of DIV field.
	sifive_spi0_1_SCKDIV_DIV_Msk = 0xfff

	// SCKMODE: Serial clock mode
	// Position of PHA field.
	sifive_spi0_1_SCKMODE_PHA_Pos = 0x0
	// Bit mask of PHA field.
	sifive_spi0_1_SCKMODE_PHA_Msk = 0x1
	// Bit PHA.
	sifive_spi0_1_SCKMODE_PHA = 0x1
	// Position of POL field.
	sifive_spi0_1_SCKMODE_POL_Pos = 0x1
	// Bit mask of POL field.
	sifive_spi0_1_SCKMODE_POL_Msk = 0x2
	// Bit POL.
	sifive_spi0_1_SCKMODE_POL = 0x2

	// CSID: Chip select ID
	// Position of CSID field.
	sifive_spi0_1_CSID_CSID_Pos = 0x0
	// Bit mask of CSID field.
	sifive_spi0_1_CSID_CSID_Msk = 0xffffffff

	// CSDEF: Chip select default
	// Position of CSDEF field.
	sifive_spi0_1_CSDEF_CSDEF_Pos = 0x0
	// Bit mask of CSDEF field.
	sifive_spi0_1_CSDEF_CSDEF_Msk = 0xffffffff

	// CSMODE: Chip select mode
	// Position of MODE field.
	sifive_spi0_1_CSMODE_MODE_Pos = 0x0
	// Bit mask of MODE field.
	sifive_spi0_1_CSMODE_MODE_Msk = 0x3

	// DELAY0: Delay control 0
	// Position of CSSCK field.
	sifive_spi0_1_DELAY0_CSSCK_Pos = 0x0
	// Bit mask of CSSCK field.
	sifive_spi0_1_DELAY0_CSSCK_Msk = 0xff
	// Position of SCKCS field.
	sifive_spi0_1_DELAY0_SCKCS_Pos = 0x10
	// Bit mask of SCKCS field.
	sifive_spi0_1_DELAY0_SCKCS_Msk = 0xff0000

	// DELAY1: Delay control 1
	// Position of INTERCS field.
	sifive_spi0_1_DELAY1_INTERCS_Pos = 0x0
	// Bit mask of INTERCS field.
	sifive_spi0_1_DELAY1_INTERCS_Msk = 0xff
	// Position of INTERXFR field.
	sifive_spi0_1_DELAY1_INTERXFR_Pos = 0x10
	// Bit mask of INTERXFR field.
	sifive_spi0_1_DELAY1_INTERXFR_Msk = 0xff0000

	// EXTRADEL: SPI extra sampling delay to increase the SPI frequency
	// Position of COARSE field.
	sifive_spi0_1_EXTRADEL_COARSE_Pos = 0x0
	// Bit mask of COARSE field.
	sifive_spi0_1_EXTRADEL_COARSE_Msk = 0xfff
	// Position of FINE field.
	sifive_spi0_1_EXTRADEL_FINE_Pos = 0xc
	// Bit mask of FINE field.
	sifive_spi0_1_EXTRADEL_FINE_Msk = 0x1f000

	// SAMPLEDEL: Number of delay stages from slave to the SPI controller
	// Position of SD field.
	sifive_spi0_1_SAMPLEDEL_SD_Pos = 0x0
	// Bit mask of SD field.
	sifive_spi0_1_SAMPLEDEL_SD_Msk = 0x1f

	// FMT: Frame format
	// Position of PROTO field.
	sifive_spi0_1_FMT_PROTO_Pos = 0x0
	// Bit mask of PROTO field.
	sifive_spi0_1_FMT_PROTO_Msk = 0x3
	// Position of ENDIAN field.
	sifive_spi0_1_FMT_ENDIAN_Pos = 0x2
	// Bit mask of ENDIAN field.
	sifive_spi0_1_FMT_ENDIAN_Msk = 0x4
	// Bit ENDIAN.
	sifive_spi0_1_FMT_ENDIAN = 0x4
	// Position of DIR field.
	sifive_spi0_1_FMT_DIR_Pos = 0x3
	// Bit mask of DIR field.
	sifive_spi0_1_FMT_DIR_Msk = 0x8
	// Bit DIR.
	sifive_spi0_1_FMT_DIR = 0x8
	// Position of LEN field.
	sifive_spi0_1_FMT_LEN_Pos = 0x10
	// Bit mask of LEN field.
	sifive_spi0_1_FMT_LEN_Msk = 0xf0000

	// TXDATA: Tx FIFO Data
	// Position of DATA field.
	sifive_spi0_1_TXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_spi0_1_TXDATA_DATA_Msk = 0xff
	// Position of FULL field.
	sifive_spi0_1_TXDATA_FULL_Pos = 0x1f
	// Bit mask of FULL field.
	sifive_spi0_1_TXDATA_FULL_Msk = 0x80000000
	// Bit FULL.
	sifive_spi0_1_TXDATA_FULL = 0x80000000

	// RXDATA: Rx FIFO data
	// Position of DATA field.
	sifive_spi0_1_RXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_spi0_1_RXDATA_DATA_Msk = 0xff
	// Position of EMPTY field.
	sifive_spi0_1_RXDATA_EMPTY_Pos = 0x1f
	// Bit mask of EMPTY field.
	sifive_spi0_1_RXDATA_EMPTY_Msk = 0x80000000
	// Bit EMPTY.
	sifive_spi0_1_RXDATA_EMPTY = 0x80000000

	// TXMARK: Tx FIFO watermark
	// Position of TXMARK field.
	sifive_spi0_1_TXMARK_TXMARK_Pos = 0x0
	// Bit mask of TXMARK field.
	sifive_spi0_1_TXMARK_TXMARK_Msk = 0x7

	// RXMARK: Rx FIFO watermark
	// Position of RXMARK field.
	sifive_spi0_1_RXMARK_RXMARK_Pos = 0x0
	// Bit mask of RXMARK field.
	sifive_spi0_1_RXMARK_RXMARK_Msk = 0x7

	// FCTRL: SPI flash interface control
	// Position of EN field.
	sifive_spi0_1_FCTRL_EN_Pos = 0x0
	// Bit mask of EN field.
	sifive_spi0_1_FCTRL_EN_Msk = 0x1
	// Bit EN.
	sifive_spi0_1_FCTRL_EN = 0x1

	// FFMT: SPI flash instruction format
	// Position of CMD_EN field.
	sifive_spi0_1_FFMT_CMD_EN_Pos = 0x0
	// Bit mask of CMD_EN field.
	sifive_spi0_1_FFMT_CMD_EN_Msk = 0x1
	// Bit CMD_EN.
	sifive_spi0_1_FFMT_CMD_EN = 0x1
	// Position of ADDR_LEN field.
	sifive_spi0_1_FFMT_ADDR_LEN_Pos = 0x1
	// Bit mask of ADDR_LEN field.
	sifive_spi0_1_FFMT_ADDR_LEN_Msk = 0xe
	// Position of PAD_CNT field.
	sifive_spi0_1_FFMT_PAD_CNT_Pos = 0x4
	// Bit mask of PAD_CNT field.
	sifive_spi0_1_FFMT_PAD_CNT_Msk = 0xf0
	// Position of CMD_PROTO field.
	sifive_spi0_1_FFMT_CMD_PROTO_Pos = 0x8
	// Bit mask of CMD_PROTO field.
	sifive_spi0_1_FFMT_CMD_PROTO_Msk = 0x300
	// Position of ADDR_PROTO field.
	sifive_spi0_1_FFMT_ADDR_PROTO_Pos = 0xa
	// Bit mask of ADDR_PROTO field.
	sifive_spi0_1_FFMT_ADDR_PROTO_Msk = 0xc00
	// Position of DATA_PROTO field.
	sifive_spi0_1_FFMT_DATA_PROTO_Pos = 0xc
	// Bit mask of DATA_PROTO field.
	sifive_spi0_1_FFMT_DATA_PROTO_Msk = 0x3000
	// Position of CMD_CODE field.
	sifive_spi0_1_FFMT_CMD_CODE_Pos = 0x10
	// Bit mask of CMD_CODE field.
	sifive_spi0_1_FFMT_CMD_CODE_Msk = 0xff0000
	// Position of PAD_CODE field.
	sifive_spi0_1_FFMT_PAD_CODE_Pos = 0x18
	// Bit mask of PAD_CODE field.
	sifive_spi0_1_FFMT_PAD_CODE_Msk = 0xff000000

	// IE: SPI interrupt enable
	// Position of TXWM field.
	sifive_spi0_1_IE_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_spi0_1_IE_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_spi0_1_IE_TXWM = 0x1
	// Position of RXWM field.
	sifive_spi0_1_IE_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_spi0_1_IE_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_spi0_1_IE_RXWM = 0x2

	// IP: SPI interrupt pending
	// Position of TXWM field.
	sifive_spi0_1_IP_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_spi0_1_IP_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_spi0_1_IP_TXWM = 0x1
	// Position of RXWM field.
	sifive_spi0_1_IP_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_spi0_1_IP_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_spi0_1_IP_RXWM = 0x2
)

// Constants for sifive_spi0_2: From sifive,spi0,control peripheral generator
const (
	// SCKDIV: Serial clock divisor
	// Position of DIV field.
	sifive_spi0_2_SCKDIV_DIV_Pos = 0x0
	// Bit mask of DIV field.
	sifive_spi0_2_SCKDIV_DIV_Msk = 0xfff

	// SCKMODE: Serial clock mode
	// Position of PHA field.
	sifive_spi0_2_SCKMODE_PHA_Pos = 0x0
	// Bit mask of PHA field.
	sifive_spi0_2_SCKMODE_PHA_Msk = 0x1
	// Bit PHA.
	sifive_spi0_2_SCKMODE_PHA = 0x1
	// Position of POL field.
	sifive_spi0_2_SCKMODE_POL_Pos = 0x1
	// Bit mask of POL field.
	sifive_spi0_2_SCKMODE_POL_Msk = 0x2
	// Bit POL.
	sifive_spi0_2_SCKMODE_POL = 0x2

	// CSID: Chip select ID
	// Position of CSID field.
	sifive_spi0_2_CSID_CSID_Pos = 0x0
	// Bit mask of CSID field.
	sifive_spi0_2_CSID_CSID_Msk = 0xffffffff

	// CSDEF: Chip select default
	// Position of CSDEF field.
	sifive_spi0_2_CSDEF_CSDEF_Pos = 0x0
	// Bit mask of CSDEF field.
	sifive_spi0_2_CSDEF_CSDEF_Msk = 0xffffffff

	// CSMODE: Chip select mode
	// Position of MODE field.
	sifive_spi0_2_CSMODE_MODE_Pos = 0x0
	// Bit mask of MODE field.
	sifive_spi0_2_CSMODE_MODE_Msk = 0x3

	// DELAY0: Delay control 0
	// Position of CSSCK field.
	sifive_spi0_2_DELAY0_CSSCK_Pos = 0x0
	// Bit mask of CSSCK field.
	sifive_spi0_2_DELAY0_CSSCK_Msk = 0xff
	// Position of SCKCS field.
	sifive_spi0_2_DELAY0_SCKCS_Pos = 0x10
	// Bit mask of SCKCS field.
	sifive_spi0_2_DELAY0_SCKCS_Msk = 0xff0000

	// DELAY1: Delay control 1
	// Position of INTERCS field.
	sifive_spi0_2_DELAY1_INTERCS_Pos = 0x0
	// Bit mask of INTERCS field.
	sifive_spi0_2_DELAY1_INTERCS_Msk = 0xff
	// Position of INTERXFR field.
	sifive_spi0_2_DELAY1_INTERXFR_Pos = 0x10
	// Bit mask of INTERXFR field.
	sifive_spi0_2_DELAY1_INTERXFR_Msk = 0xff0000

	// EXTRADEL: SPI extra sampling delay to increase the SPI frequency
	// Position of COARSE field.
	sifive_spi0_2_EXTRADEL_COARSE_Pos = 0x0
	// Bit mask of COARSE field.
	sifive_spi0_2_EXTRADEL_COARSE_Msk = 0xfff
	// Position of FINE field.
	sifive_spi0_2_EXTRADEL_FINE_Pos = 0xc
	// Bit mask of FINE field.
	sifive_spi0_2_EXTRADEL_FINE_Msk = 0x1f000

	// SAMPLEDEL: Number of delay stages from slave to the SPI controller
	// Position of SD field.
	sifive_spi0_2_SAMPLEDEL_SD_Pos = 0x0
	// Bit mask of SD field.
	sifive_spi0_2_SAMPLEDEL_SD_Msk = 0x1f

	// FMT: Frame format
	// Position of PROTO field.
	sifive_spi0_2_FMT_PROTO_Pos = 0x0
	// Bit mask of PROTO field.
	sifive_spi0_2_FMT_PROTO_Msk = 0x3
	// Position of ENDIAN field.
	sifive_spi0_2_FMT_ENDIAN_Pos = 0x2
	// Bit mask of ENDIAN field.
	sifive_spi0_2_FMT_ENDIAN_Msk = 0x4
	// Bit ENDIAN.
	sifive_spi0_2_FMT_ENDIAN = 0x4
	// Position of DIR field.
	sifive_spi0_2_FMT_DIR_Pos = 0x3
	// Bit mask of DIR field.
	sifive_spi0_2_FMT_DIR_Msk = 0x8
	// Bit DIR.
	sifive_spi0_2_FMT_DIR = 0x8
	// Position of LEN field.
	sifive_spi0_2_FMT_LEN_Pos = 0x10
	// Bit mask of LEN field.
	sifive_spi0_2_FMT_LEN_Msk = 0xf0000

	// TXDATA: Tx FIFO Data
	// Position of DATA field.
	sifive_spi0_2_TXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_spi0_2_TXDATA_DATA_Msk = 0xff
	// Position of FULL field.
	sifive_spi0_2_TXDATA_FULL_Pos = 0x1f
	// Bit mask of FULL field.
	sifive_spi0_2_TXDATA_FULL_Msk = 0x80000000
	// Bit FULL.
	sifive_spi0_2_TXDATA_FULL = 0x80000000

	// RXDATA: Rx FIFO data
	// Position of DATA field.
	sifive_spi0_2_RXDATA_DATA_Pos = 0x0
	// Bit mask of DATA field.
	sifive_spi0_2_RXDATA_DATA_Msk = 0xff
	// Position of EMPTY field.
	sifive_spi0_2_RXDATA_EMPTY_Pos = 0x1f
	// Bit mask of EMPTY field.
	sifive_spi0_2_RXDATA_EMPTY_Msk = 0x80000000
	// Bit EMPTY.
	sifive_spi0_2_RXDATA_EMPTY = 0x80000000

	// TXMARK: Tx FIFO watermark
	// Position of TXMARK field.
	sifive_spi0_2_TXMARK_TXMARK_Pos = 0x0
	// Bit mask of TXMARK field.
	sifive_spi0_2_TXMARK_TXMARK_Msk = 0x7

	// RXMARK: Rx FIFO watermark
	// Position of RXMARK field.
	sifive_spi0_2_RXMARK_RXMARK_Pos = 0x0
	// Bit mask of RXMARK field.
	sifive_spi0_2_RXMARK_RXMARK_Msk = 0x7

	// FCTRL: SPI flash interface control
	// Position of EN field.
	sifive_spi0_2_FCTRL_EN_Pos = 0x0
	// Bit mask of EN field.
	sifive_spi0_2_FCTRL_EN_Msk = 0x1
	// Bit EN.
	sifive_spi0_2_FCTRL_EN = 0x1

	// FFMT: SPI flash instruction format
	// Position of CMD_EN field.
	sifive_spi0_2_FFMT_CMD_EN_Pos = 0x0
	// Bit mask of CMD_EN field.
	sifive_spi0_2_FFMT_CMD_EN_Msk = 0x1
	// Bit CMD_EN.
	sifive_spi0_2_FFMT_CMD_EN = 0x1
	// Position of ADDR_LEN field.
	sifive_spi0_2_FFMT_ADDR_LEN_Pos = 0x1
	// Bit mask of ADDR_LEN field.
	sifive_spi0_2_FFMT_ADDR_LEN_Msk = 0xe
	// Position of PAD_CNT field.
	sifive_spi0_2_FFMT_PAD_CNT_Pos = 0x4
	// Bit mask of PAD_CNT field.
	sifive_spi0_2_FFMT_PAD_CNT_Msk = 0xf0
	// Position of CMD_PROTO field.
	sifive_spi0_2_FFMT_CMD_PROTO_Pos = 0x8
	// Bit mask of CMD_PROTO field.
	sifive_spi0_2_FFMT_CMD_PROTO_Msk = 0x300
	// Position of ADDR_PROTO field.
	sifive_spi0_2_FFMT_ADDR_PROTO_Pos = 0xa
	// Bit mask of ADDR_PROTO field.
	sifive_spi0_2_FFMT_ADDR_PROTO_Msk = 0xc00
	// Position of DATA_PROTO field.
	sifive_spi0_2_FFMT_DATA_PROTO_Pos = 0xc
	// Bit mask of DATA_PROTO field.
	sifive_spi0_2_FFMT_DATA_PROTO_Msk = 0x3000
	// Position of CMD_CODE field.
	sifive_spi0_2_FFMT_CMD_CODE_Pos = 0x10
	// Bit mask of CMD_CODE field.
	sifive_spi0_2_FFMT_CMD_CODE_Msk = 0xff0000
	// Position of PAD_CODE field.
	sifive_spi0_2_FFMT_PAD_CODE_Pos = 0x18
	// Bit mask of PAD_CODE field.
	sifive_spi0_2_FFMT_PAD_CODE_Msk = 0xff000000

	// IE: SPI interrupt enable
	// Position of TXWM field.
	sifive_spi0_2_IE_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_spi0_2_IE_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_spi0_2_IE_TXWM = 0x1
	// Position of RXWM field.
	sifive_spi0_2_IE_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_spi0_2_IE_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_spi0_2_IE_RXWM = 0x2

	// IP: SPI interrupt pending
	// Position of TXWM field.
	sifive_spi0_2_IP_TXWM_Pos = 0x0
	// Bit mask of TXWM field.
	sifive_spi0_2_IP_TXWM_Msk = 0x1
	// Bit TXWM.
	sifive_spi0_2_IP_TXWM = 0x1
	// Position of RXWM field.
	sifive_spi0_2_IP_RXWM_Pos = 0x1
	// Bit mask of RXWM field.
	sifive_spi0_2_IP_RXWM_Msk = 0x2
	// Bit RXWM.
	sifive_spi0_2_IP_RXWM = 0x2
)

// Constants for sifive_test0_0: From sifive,test0,control peripheral generator
const (
	// FINISHER: Test finisher register
	// Position of STATUS field.
	sifive_test0_0_FINISHER_STATUS_Pos = 0x0
	// Bit mask of STATUS field.
	sifive_test0_0_FINISHER_STATUS_Msk = 0xffff
	// Position of CODE field.
	sifive_test0_0_FINISHER_CODE_Pos = 0x10
	// Bit mask of CODE field.
	sifive_test0_0_FINISHER_CODE_Msk = 0xffff0000
)
