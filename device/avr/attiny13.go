// Automatically generated file. DO NOT EDIT.
// Generated by gen-device-avr.go from ATtiny13.atdf, see http://packs.download.atmel.com/

//go:build avr && attiny13

// Device information for the ATtiny13.
package avr

import (
	"runtime/volatile"
	"unsafe"
)

// Some information about this device.
const (
	DEVICE = "ATtiny13"
	ARCH   = "AVR8"
	FAMILY = "tinyAVR"
)

// Interrupts
const (
	IRQ_RESET      = 0 // External Reset, Power-on Reset and Watchdog Reset
	IRQ_INT0       = 1 // External Interrupt 0
	IRQ_PCINT0     = 2 // External Interrupt Request 0
	IRQ_TIM0_OVF   = 3 // Timer/Counter0 Overflow
	IRQ_EE_RDY     = 4 // EEPROM Ready
	IRQ_ANA_COMP   = 5 // Analog Comparator
	IRQ_TIM0_COMPA = 6 // Timer/Counter Compare Match A
	IRQ_TIM0_COMPB = 7 // Timer/Counter Compare Match B
	IRQ_WDT        = 8 // Watchdog Time-out
	IRQ_ADC        = 9 // ADC Conversion Complete
	IRQ_max        = 9 // Highest interrupt number on this device.
)

// Pseudo function call that is replaced by the compiler with the actual
// functions registered through interrupt.New.
//
//go:linkname callHandlers runtime/interrupt.callHandlers
func callHandlers(num int)

//export __vector_RESET
//go:interrupt
func interruptRESET() {
	callHandlers(IRQ_RESET)
}

//export __vector_INT0
//go:interrupt
func interruptINT0() {
	callHandlers(IRQ_INT0)
}

//export __vector_PCINT0
//go:interrupt
func interruptPCINT0() {
	callHandlers(IRQ_PCINT0)
}

//export __vector_TIM0_OVF
//go:interrupt
func interruptTIM0_OVF() {
	callHandlers(IRQ_TIM0_OVF)
}

//export __vector_EE_RDY
//go:interrupt
func interruptEE_RDY() {
	callHandlers(IRQ_EE_RDY)
}

//export __vector_ANA_COMP
//go:interrupt
func interruptANA_COMP() {
	callHandlers(IRQ_ANA_COMP)
}

//export __vector_TIM0_COMPA
//go:interrupt
func interruptTIM0_COMPA() {
	callHandlers(IRQ_TIM0_COMPA)
}

//export __vector_TIM0_COMPB
//go:interrupt
func interruptTIM0_COMPB() {
	callHandlers(IRQ_TIM0_COMPB)
}

//export __vector_WDT
//go:interrupt
func interruptWDT() {
	callHandlers(IRQ_WDT)
}

//export __vector_ADC
//go:interrupt
func interruptADC() {
	callHandlers(IRQ_ADC)
}

// Peripherals.
var (
	// Analog-to-Digital Converter
	ADMUX  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x27)))
	ADCSRA = (*volatile.Register8)(unsafe.Pointer(uintptr(0x26)))
	ADCL   = (*volatile.Register8)(unsafe.Pointer(uintptr(0x24)))
	ADCH   = (*volatile.Register8)(unsafe.Pointer(uintptr(0x25)))
	ADCSRB = (*volatile.Register8)(unsafe.Pointer(uintptr(0x23)))
	DIDR0  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x34)))

	// Analog Comparator
	ACSR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x28)))

	// EEPROM
	EEAR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x3e)))
	EEDR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x3d)))
	EECR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x3c)))

	// CPU Registers
	SREG   = (*volatile.Register8)(unsafe.Pointer(uintptr(0x5f)))
	SPL    = (*volatile.Register8)(unsafe.Pointer(uintptr(0x5d)))
	MCUCR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x55)))
	MCUSR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x54)))
	OSCCAL = (*volatile.Register8)(unsafe.Pointer(uintptr(0x51)))
	CLKPR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x46)))
	DWDR   = (*volatile.Register8)(unsafe.Pointer(uintptr(0x4e)))
	SPMCSR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x57)))

	// I/O Port
	PORTB = (*volatile.Register8)(unsafe.Pointer(uintptr(0x38)))
	DDRB  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x37)))
	PINB  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x36)))

	// External Interrupts
	GIMSK = (*volatile.Register8)(unsafe.Pointer(uintptr(0x5b)))
	GIFR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x5a)))
	PCMSK = (*volatile.Register8)(unsafe.Pointer(uintptr(0x35)))

	// Timer/Counter, 8-bit
	TIMSK0 = (*volatile.Register8)(unsafe.Pointer(uintptr(0x59)))
	TIFR0  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x58)))
	OCR0A  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x56)))
	TCCR0A = (*volatile.Register8)(unsafe.Pointer(uintptr(0x4f)))
	TCNT0  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x52)))
	TCCR0B = (*volatile.Register8)(unsafe.Pointer(uintptr(0x53)))
	OCR0B  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x49)))
	GTCCR  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x48)))

	// Watchdog Timer
	WDTCR = (*volatile.Register8)(unsafe.Pointer(uintptr(0x41)))

	// Fuses
	HIGH = (*volatile.Register8)(unsafe.Pointer(uintptr(0x1)))
	LOW  = (*volatile.Register8)(unsafe.Pointer(uintptr(0x0)))

	// Lockbits
	LOCKBIT = (*volatile.Register8)(unsafe.Pointer(uintptr(0x0)))
)

// Bitfields for FUSE: Fuses
const (
	// HIGH
	HIGH_SELFPRGEN     = 0x10 // Self Programming enable
	HIGH_SELFPRGEN_Msk = 0x10 // Self Programming enable
	HIGH_DWEN          = 0x8  // Debug Wire enable
	HIGH_DWEN_Msk      = 0x8  // Debug Wire enable
	HIGH_BODLEVEL0     = 0x2  // Enable BOD and select level
	HIGH_BODLEVEL1     = 0x4  // Enable BOD and select level
	HIGH_BODLEVEL_Msk  = 0x6  // Enable BOD and select level
	HIGH_RSTDISBL      = 0x1  // Reset Disabled (Enable PB5 as i/o pin)
	HIGH_RSTDISBL_Msk  = 0x1  // Reset Disabled (Enable PB5 as i/o pin)

	// LOW
	LOW_SPIEN         = 0x80 // Serial program downloading (SPI) enabled
	LOW_SPIEN_Msk     = 0x80 // Serial program downloading (SPI) enabled
	LOW_EESAVE        = 0x40 // Preserve EEPROM through the Chip Erase cycle
	LOW_EESAVE_Msk    = 0x40 // Preserve EEPROM through the Chip Erase cycle
	LOW_WDTON         = 0x20 // Watch-dog Timer always on
	LOW_WDTON_Msk     = 0x20 // Watch-dog Timer always on
	LOW_CKDIV8        = 0x10 // Divide clock by 8 internally
	LOW_CKDIV8_Msk    = 0x10 // Divide clock by 8 internally
	LOW_SUT_CKSEL0    = 0x1  // Select Clock Source
	LOW_SUT_CKSEL1    = 0x2  // Select Clock Source
	LOW_SUT_CKSEL2    = 0x4  // Select Clock Source
	LOW_SUT_CKSEL3    = 0x8  // Select Clock Source
	LOW_SUT_CKSEL_Msk = 0xf  // Select Clock Source
)

// Bitfields for LOCKBIT: Lockbits
const (
	// LOCKBIT
	LOCKBIT_LB0    = 0x1 // Memory Lock
	LOCKBIT_LB1    = 0x2 // Memory Lock
	LOCKBIT_LB_Msk = 0x3 // Memory Lock
)

// Bitfields for ADC: Analog-to-Digital Converter
const (
	// ADMUX: The ADC multiplexer Selection Register
	ADMUX_REFS0     = 0x40 // Reference Selection Bit 0
	ADMUX_REFS0_Msk = 0x40 // Reference Selection Bit 0
	ADMUX_ADLAR     = 0x20 // Left Adjust Result
	ADMUX_ADLAR_Msk = 0x20 // Left Adjust Result
	ADMUX_MUX0      = 0x1  // Analog Channel and Gain Selection Bits
	ADMUX_MUX1      = 0x2  // Analog Channel and Gain Selection Bits
	ADMUX_MUX_Msk   = 0x3  // Analog Channel and Gain Selection Bits

	// ADCSRA: The ADC Control and Status register
	ADCSRA_ADEN      = 0x80 // ADC Enable
	ADCSRA_ADEN_Msk  = 0x80 // ADC Enable
	ADCSRA_ADSC      = 0x40 // ADC Start Conversion
	ADCSRA_ADSC_Msk  = 0x40 // ADC Start Conversion
	ADCSRA_ADATE     = 0x20 // ADC Auto Trigger Enable
	ADCSRA_ADATE_Msk = 0x20 // ADC Auto Trigger Enable
	ADCSRA_ADIF      = 0x10 // ADC Interrupt Flag
	ADCSRA_ADIF_Msk  = 0x10 // ADC Interrupt Flag
	ADCSRA_ADIE      = 0x8  // ADC Interrupt Enable
	ADCSRA_ADIE_Msk  = 0x8  // ADC Interrupt Enable
	ADCSRA_ADPS0     = 0x1  // ADC  Prescaler Select Bits
	ADCSRA_ADPS1     = 0x2  // ADC  Prescaler Select Bits
	ADCSRA_ADPS2     = 0x4  // ADC  Prescaler Select Bits
	ADCSRA_ADPS_Msk  = 0x7  // ADC  Prescaler Select Bits

	// ADCSRB: ADC Control and Status Register B
	ADCSRB_ADTS0    = 0x1 // ADC Auto Trigger Sources
	ADCSRB_ADTS1    = 0x2 // ADC Auto Trigger Sources
	ADCSRB_ADTS2    = 0x4 // ADC Auto Trigger Sources
	ADCSRB_ADTS_Msk = 0x7 // ADC Auto Trigger Sources

	// DIDR0: Digital Input Disable Register 0
	DIDR0_ADC0D     = 0x20 // ADC0 Digital input Disable
	DIDR0_ADC0D_Msk = 0x20 // ADC0 Digital input Disable
	DIDR0_ADC2D     = 0x10 // ADC2 Digital input Disable
	DIDR0_ADC2D_Msk = 0x10 // ADC2 Digital input Disable
	DIDR0_ADC3D     = 0x8  // ADC3 Digital input Disable
	DIDR0_ADC3D_Msk = 0x8  // ADC3 Digital input Disable
	DIDR0_ADC1D     = 0x4  // ADC2 Digital input Disable
	DIDR0_ADC1D_Msk = 0x4  // ADC2 Digital input Disable
)

// Bitfields for AC: Analog Comparator
const (
	// ACSR: Analog Comparator Control And Status Register
	ACSR_ACD      = 0x80 // Analog Comparator Disable
	ACSR_ACD_Msk  = 0x80 // Analog Comparator Disable
	ACSR_ACBG     = 0x40 // Analog Comparator Bandgap Select
	ACSR_ACBG_Msk = 0x40 // Analog Comparator Bandgap Select
	ACSR_ACO      = 0x20 // Analog Compare Output
	ACSR_ACO_Msk  = 0x20 // Analog Compare Output
	ACSR_ACI      = 0x10 // Analog Comparator Interrupt Flag
	ACSR_ACI_Msk  = 0x10 // Analog Comparator Interrupt Flag
	ACSR_ACIE     = 0x8  // Analog Comparator Interrupt Enable
	ACSR_ACIE_Msk = 0x8  // Analog Comparator Interrupt Enable
	ACSR_ACIS0    = 0x1  // Analog Comparator Interrupt Mode Select bits
	ACSR_ACIS1    = 0x2  // Analog Comparator Interrupt Mode Select bits
	ACSR_ACIS_Msk = 0x3  // Analog Comparator Interrupt Mode Select bits
)

// Bitfields for EEPROM: EEPROM
const (
	// EECR: EEPROM Control Register
	EECR_EEPM0     = 0x10
	EECR_EEPM1     = 0x20
	EECR_EEPM_Msk  = 0x30
	EECR_EERIE     = 0x8 // EEProm Ready Interrupt Enable
	EECR_EERIE_Msk = 0x8 // EEProm Ready Interrupt Enable
	EECR_EEMWE     = 0x4 // EEPROM Master Write Enable
	EECR_EEMWE_Msk = 0x4 // EEPROM Master Write Enable
	EECR_EEWE      = 0x2 // EEPROM Write Enable
	EECR_EEWE_Msk  = 0x2 // EEPROM Write Enable
	EECR_EERE      = 0x1 // EEPROM Read Enable
	EECR_EERE_Msk  = 0x1 // EEPROM Read Enable
)

// Bitfields for CPU: CPU Registers
const (
	// SREG: Status Register
	SREG_I     = 0x80 // Global Interrupt Enable
	SREG_I_Msk = 0x80 // Global Interrupt Enable
	SREG_T     = 0x40 // Bit Copy Storage
	SREG_T_Msk = 0x40 // Bit Copy Storage
	SREG_H     = 0x20 // Half Carry Flag
	SREG_H_Msk = 0x20 // Half Carry Flag
	SREG_S     = 0x10 // Sign Bit
	SREG_S_Msk = 0x10 // Sign Bit
	SREG_V     = 0x8  // Two's Complement Overflow Flag
	SREG_V_Msk = 0x8  // Two's Complement Overflow Flag
	SREG_N     = 0x4  // Negative Flag
	SREG_N_Msk = 0x4  // Negative Flag
	SREG_Z     = 0x2  // Zero Flag
	SREG_Z_Msk = 0x2  // Zero Flag
	SREG_C     = 0x1  // Carry Flag
	SREG_C_Msk = 0x1  // Carry Flag

	// MCUCR: MCU Control Register
	MCUCR_PUD      = 0x40 // Pull-up Disable
	MCUCR_PUD_Msk  = 0x40 // Pull-up Disable
	MCUCR_SE       = 0x20 // Sleep Enable
	MCUCR_SE_Msk   = 0x20 // Sleep Enable
	MCUCR_SM0      = 0x8  // Sleep Mode Select Bits
	MCUCR_SM1      = 0x10 // Sleep Mode Select Bits
	MCUCR_SM_Msk   = 0x18 // Sleep Mode Select Bits
	MCUCR_ISC00    = 0x1  // Interrupt Sense Control 0 bits
	MCUCR_ISC01    = 0x2  // Interrupt Sense Control 0 bits
	MCUCR_ISC0_Msk = 0x3  // Interrupt Sense Control 0 bits

	// MCUSR: MCU Status register
	MCUSR_WDRF      = 0x8 // Watchdog Reset Flag
	MCUSR_WDRF_Msk  = 0x8 // Watchdog Reset Flag
	MCUSR_BORF      = 0x4 // Brown-out Reset Flag
	MCUSR_BORF_Msk  = 0x4 // Brown-out Reset Flag
	MCUSR_EXTRF     = 0x2 // External Reset Flag
	MCUSR_EXTRF_Msk = 0x2 // External Reset Flag
	MCUSR_PORF      = 0x1 // Power-On Reset Flag
	MCUSR_PORF_Msk  = 0x1 // Power-On Reset Flag

	// OSCCAL: Oscillator Calibration Register
	OSCCAL_OSCCAL0    = 0x1  // Oscillator Calibration
	OSCCAL_OSCCAL1    = 0x2  // Oscillator Calibration
	OSCCAL_OSCCAL2    = 0x4  // Oscillator Calibration
	OSCCAL_OSCCAL3    = 0x8  // Oscillator Calibration
	OSCCAL_OSCCAL4    = 0x10 // Oscillator Calibration
	OSCCAL_OSCCAL5    = 0x20 // Oscillator Calibration
	OSCCAL_OSCCAL6    = 0x40 // Oscillator Calibration
	OSCCAL_OSCCAL7    = 0x80 // Oscillator Calibration
	OSCCAL_OSCCAL_Msk = 0xff // Oscillator Calibration

	// CLKPR: Clock Prescale Register
	CLKPR_CLKPCE     = 0x80 // Clock Prescaler Change Enable
	CLKPR_CLKPCE_Msk = 0x80 // Clock Prescaler Change Enable
	CLKPR_CLKPS0     = 0x1  // Clock Prescaler Select Bits
	CLKPR_CLKPS1     = 0x2  // Clock Prescaler Select Bits
	CLKPR_CLKPS2     = 0x4  // Clock Prescaler Select Bits
	CLKPR_CLKPS3     = 0x8  // Clock Prescaler Select Bits
	CLKPR_CLKPS_Msk  = 0xf  // Clock Prescaler Select Bits

	// SPMCSR: Store Program Memory Control and Status Register
	SPMCSR_CTPB      = 0x10 // Clear Temporary Page Buffer
	SPMCSR_CTPB_Msk  = 0x10 // Clear Temporary Page Buffer
	SPMCSR_RFLB      = 0x8  // Read Fuse and Lock Bits
	SPMCSR_RFLB_Msk  = 0x8  // Read Fuse and Lock Bits
	SPMCSR_PGWRT     = 0x4  // Page Write
	SPMCSR_PGWRT_Msk = 0x4  // Page Write
	SPMCSR_PGERS     = 0x2  // Page Erase
	SPMCSR_PGERS_Msk = 0x2  // Page Erase
	SPMCSR_SPMEN     = 0x1  // Store program Memory Enable
	SPMCSR_SPMEN_Msk = 0x1  // Store program Memory Enable
)

// Bitfields for EXINT: External Interrupts
const (
	// GIMSK: General Interrupt Mask Register
	GIMSK_INT0     = 0x40 // External Interrupt Request 0 Enable
	GIMSK_INT0_Msk = 0x40 // External Interrupt Request 0 Enable
	GIMSK_PCIE     = 0x20 // Pin Change Interrupt Enable
	GIMSK_PCIE_Msk = 0x20 // Pin Change Interrupt Enable

	// GIFR: General Interrupt Flag register
	GIFR_INTF0     = 0x40 // External Interrupt Flag 0
	GIFR_INTF0_Msk = 0x40 // External Interrupt Flag 0
	GIFR_PCIF      = 0x20 // Pin Change Interrupt Flag
	GIFR_PCIF_Msk  = 0x20 // Pin Change Interrupt Flag
)

// Bitfields for TC0: Timer/Counter, 8-bit
const (
	// TIMSK0: Timer/Counter0 Interrupt Mask Register
	TIMSK0_OCIE0B     = 0x8 // Timer/Counter0 Output Compare Match B Interrupt Enable
	TIMSK0_OCIE0B_Msk = 0x8 // Timer/Counter0 Output Compare Match B Interrupt Enable
	TIMSK0_OCIE0A     = 0x4 // Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK0_OCIE0A_Msk = 0x4 // Timer/Counter0 Output Compare Match A Interrupt Enable
	TIMSK0_TOIE0      = 0x2 // Timer/Counter0 Overflow Interrupt Enable
	TIMSK0_TOIE0_Msk  = 0x2 // Timer/Counter0 Overflow Interrupt Enable

	// TIFR0: Timer/Counter0 Interrupt Flag register
	TIFR0_OCF0B     = 0x8 // Timer/Counter0 Output Compare Flag 0B
	TIFR0_OCF0B_Msk = 0x8 // Timer/Counter0 Output Compare Flag 0B
	TIFR0_OCF0A     = 0x4 // Timer/Counter0 Output Compare Flag 0A
	TIFR0_OCF0A_Msk = 0x4 // Timer/Counter0 Output Compare Flag 0A
	TIFR0_TOV0      = 0x2 // Timer/Counter0 Overflow Flag
	TIFR0_TOV0_Msk  = 0x2 // Timer/Counter0 Overflow Flag

	// TCCR0A: Timer/Counter  Control Register A
	TCCR0A_COM0A0    = 0x40 // Compare Match Output A Mode
	TCCR0A_COM0A1    = 0x80 // Compare Match Output A Mode
	TCCR0A_COM0A_Msk = 0xc0 // Compare Match Output A Mode
	TCCR0A_COM0B0    = 0x10 // Compare Match Output B Mode
	TCCR0A_COM0B1    = 0x20 // Compare Match Output B Mode
	TCCR0A_COM0B_Msk = 0x30 // Compare Match Output B Mode
	TCCR0A_WGM00     = 0x1  // Waveform Generation Mode
	TCCR0A_WGM01     = 0x2  // Waveform Generation Mode
	TCCR0A_WGM0_Msk  = 0x3  // Waveform Generation Mode

	// TCCR0B: Timer/Counter Control Register B
	TCCR0B_FOC0A     = 0x80 // Force Output Compare A
	TCCR0B_FOC0A_Msk = 0x80 // Force Output Compare A
	TCCR0B_FOC0B     = 0x40 // Force Output Compare B
	TCCR0B_FOC0B_Msk = 0x40 // Force Output Compare B
	TCCR0B_WGM02     = 0x8  // Waveform Generation Mode
	TCCR0B_WGM02_Msk = 0x8  // Waveform Generation Mode
	TCCR0B_CS00      = 0x1  // Clock Select
	TCCR0B_CS01      = 0x2  // Clock Select
	TCCR0B_CS02      = 0x4  // Clock Select
	TCCR0B_CS0_Msk   = 0x7  // Clock Select

	// GTCCR: General Timer Conuter Register
	GTCCR_TSM       = 0x80 // Timer/Counter Synchronization Mode
	GTCCR_TSM_Msk   = 0x80 // Timer/Counter Synchronization Mode
	GTCCR_PSR10     = 0x1  // Prescaler Reset Timer/Counter0
	GTCCR_PSR10_Msk = 0x1  // Prescaler Reset Timer/Counter0
)

// Bitfields for WDT: Watchdog Timer
const (
	// WDTCR: Watchdog Timer Control Register
	WDTCR_WDTIF     = 0x80 // Watchdog Timeout Interrupt Flag
	WDTCR_WDTIF_Msk = 0x80 // Watchdog Timeout Interrupt Flag
	WDTCR_WDTIE     = 0x40 // Watchdog Timeout Interrupt Enable
	WDTCR_WDTIE_Msk = 0x40 // Watchdog Timeout Interrupt Enable
	WDTCR_WDP0      = 0x1  // Watchdog Timer Prescaler Bits
	WDTCR_WDP1      = 0x2  // Watchdog Timer Prescaler Bits
	WDTCR_WDP2      = 0x4  // Watchdog Timer Prescaler Bits
	WDTCR_WDP3      = 0x20 // Watchdog Timer Prescaler Bits
	WDTCR_WDP_Msk   = 0x27 // Watchdog Timer Prescaler Bits
	WDTCR_WDCE      = 0x10 // Watchdog Change Enable
	WDTCR_WDCE_Msk  = 0x10 // Watchdog Change Enable
	WDTCR_WDE       = 0x8  // Watch Dog Enable
	WDTCR_WDE_Msk   = 0x8  // Watch Dog Enable
)
